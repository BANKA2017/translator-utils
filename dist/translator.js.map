{"version":3,"file":"translator.js","sources":["../packages/translator-utils-crypto/index.js","../src/src/misc.ts","../packages/translator-utils-axios-helper/index.js","../src/src/language.ts","../src/src/source/yandex.ts","../src/src/source/google.ts","../src/src/source/microsoft.ts","../src/src/source/sogou.ts","../src/src/index.browser.ts"],"sourcesContent":["const cryptoHandle = crypto || {\n    getRandomValues: () => [0],\n    randomUUID: () => '00000000-0000-0000-0000-000000000000'\n}\nexport default cryptoHandle\n","import cryptoHandle from 'translator-utils-crypto'\n\nexport const SupportedLanguage = (List: string[], language: string): boolean => {\n    return List.map((x) => x.toLowerCase()).includes(language.toLowerCase())\n}\n\nexport const IsChs = (lang = 'zh') => /^zh(?:_|\\-)(?:cn|sg|my|chs)|zh|chs|zho$/.test(lang.toLowerCase())\nexport const IsCht = (lang = 'zh_tw') => /^zh(?:_|\\-)(?:tw|hk|mo|cht)|cht$/.test(lang.toLowerCase())\n\n// https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer\nexport const base64_to_buffer = (base64: string): ArrayBuffer => {\n    let binaryString = atob(base64)\n    let bytes = new Uint8Array(binaryString.length)\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i)\n    }\n    return bytes.buffer\n}\n\nexport const buffer_to_base64 = (buf: ArrayBuffer): string => {\n    let binary = ''\n    const bytes = new Uint8Array(buf)\n    for (var i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i])\n    }\n    return btoa(binary)\n}\n\nexport const generateUUID = (): string => cryptoHandle.randomUUID() || '00000000-0000-0000-0000-000000000000'\n\nexport const htmlspecialchars = (str: string) => {\n    str = str.replaceAll('&gt;', '>').replaceAll('&lt;', '<').replaceAll('&amp;', '&').replaceAll('&quot;', '\"').replaceAll('&apos;', \"'\")\n    str = str.replaceAll(/&#([\\d]+);/gm, (_, p1) => String.fromCharCode(parseInt(p1)))\n    return str\n}\n\nexport const htmlentities = (str: string) => {\n    return str.replaceAll('>', '&gt;').replaceAll('<', '&lt;').replaceAll('&', '&amp;').replaceAll('\"', '&quot;').replaceAll(\"'\", '&apos;')\n}\n\n//https://gist.github.com/72lions/4528834\nexport const concatBuffer = (...buffer: ArrayBuffer[]): ArrayBuffer => {\n    const length = buffer.reduce((acc, cur) => acc + cur.byteLength, 0)\n    let tmp = new Uint8Array(length)\n    buffer.reduce((acc, cur) => {\n        tmp.set(new Uint8Array(cur), acc)\n        return acc + cur.byteLength\n    }, 0)\n    return tmp.buffer\n}\n","/// <reference path=\"index.d.ts\" />\nclass AxiosRequest {\n    requestHandle(url, postData, options = {}) {\n        if (!options.timeout) {\n            options.timeout = 30000\n        }\n\n        const validPostRequest = (options?.method || '').toLowerCase() === 'post' && postData\n        if (!options.headers) {\n            options.headers = {}\n        }\n        const isFormData = postData instanceof FormData\n        if (validPostRequest && !isFormData) {\n            options.headers['content-type'] = 'application/x-www-form-urlencoded'\n            if (typeof postData === 'object') {\n                postData = JSON.stringify(postData)\n                options.headers['content-type'] = 'application/json'\n            }\n            options.headers['content-length'] = postData.length\n            options.body = postData\n        }\n        // const method = options?.method || 'GET'\n        return new Promise((resolve, reject) => {\n            if (typeof fetch === 'function') {\n                fetch(url, options)\n                    .then(async (response) => {\n                        return { response, data: await response.arrayBuffer() }\n                    })\n                    .then((res) => {\n                        resolve(this.responseBuilder(res.response, res.data, options))\n                    })\n                    .catch((e) => {\n                        reject({ cause: e, toString: () => e.toString() })\n                    })\n            } else {\n                reject({\n                    cause: 'NOT SUPPORT fetch OR XMLHttpRequest',\n                    toString: 'NOT SUPPORT fetch OR XMLHttpRequest'\n                })\n            }\n        })\n    }\n    //https://stackoverflow.com/questions/9804777/how-to-test-if-a-string-is-json-or-not\n    isJson(str) {\n        try {\n            JSON.parse(str)\n            return true\n        } catch (e) {\n            return false\n        }\n    }\n    responseBuilder(res, data, options = {}) {\n        switch (options?.responseType) {\n            case 'arraybuffer':\n                break\n            default:\n                data = new TextDecoder().decode(data)\n                if (this.isJson(data)) {\n                    data = JSON.parse(data)\n                }\n        }\n\n        let headers = Object.fromEntries(res.headers.entries())\n\n        if (headers['set-cookie'] && res.headers.getSetCookie) {\n            //https://developer.mozilla.org/en-US/docs/Web/API/Headers/getSetCookie\n            headers['set-cookie'] = res.headers.getSetCookie()\n        } else if (headers['set-cookie'] && res.headers.getAll) {\n            //workers\n            //TypeError: getAll() can only be used with the header name \"Set-Cookie\".\n            headers['set-cookie'] = res.headers.getAll('set-cookie')\n        } else if (headers['set-cookie']) {\n            //Deno and Node.js 18\n            //https://github.com/denoland/deno/pull/5100\n            headers['set-cookie'] = [...res.headers.entries()].filter((header) => header[0] === 'set-cookie').map((header) => header[1])\n        }\n        return {\n            status: res.status,\n            statusText: res.statusText,\n            headers,\n            data\n        }\n    }\n\n    get(url, options = {}) {\n        options.method = 'GET'\n        return this.requestHandle(url, null, options)\n    }\n    post(url, data = '', options = {}) {\n        options.method = 'POST'\n        return this.requestHandle(url, data, options)\n    }\n}\n\nconst axiosFetch = new AxiosRequest()\n\nexport default axiosFetch\n","import type { TargetFilter } from './types.js'\n\nexport type GOOGLE_LIST = 'aa'|'ab'|'ace'|'ach'|'af'|'ak'|'alz'|'am'|'ar'|'as'|'av'|'awa'|'ay'|'az'|'ba'|'bal'|'ban'|'bbc'|'bci'|'be'|'bem'|'ber'|'ber-latn'|'bew'|'bg'|'bho'|'bik'|'bm'|'bm-nkoo'|'bn'|'bo'|'br'|'bs'|'bts'|'btx'|'bua'|'ca'|'ce'|'ceb'|'cgg'|'ch'|'chk'|'chm'|'ckb'|'cnh'|'co'|'crh'|'crs'|'cs'|'cv'|'cy'|'da'|'de'|'din'|'doi'|'dov'|'dv'|'dyu'|'dz'|'ee'|'el'|'en'|'eo'|'es'|'et'|'eu'|'fa'|'fa-af'|'ff'|'fi'|'fj'|'fo'|'fon'|'fr'|'fur'|'fy'|'ga'|'gaa'|'gd'|'gl'|'gn'|'gom'|'gu'|'gv'|'ha'|'haw'|'hi'|'hil'|'hmn'|'hr'|'hrx'|'ht'|'hu'|'hy'|'iba'|'id'|'ig'|'ilo'|'is'|'it'|'iw'|'ja'|'jam'|'jw'|'ka'|'kac'|'kek'|'kg'|'kha'|'kk'|'kl'|'km'|'kn'|'ko'|'kr'|'kri'|'ktu'|'ku'|'kv'|'ky'|'la'|'lb'|'lg'|'li'|'lij'|'lmo'|'ln'|'lo'|'lt'|'ltg'|'luo'|'lus'|'lv'|'mad'|'mai'|'mak'|'mam'|'mfe'|'mg'|'mh'|'mi'|'min'|'mk'|'ml'|'mn'|'mni-mtei'|'mr'|'ms'|'ms-arab'|'mt'|'mwr'|'my'|'ndc-zw'|'ne'|'new'|'nhe'|'nl'|'no'|'nr'|'nso'|'nus'|'ny'|'oc'|'om'|'or'|'os'|'pa'|'pa-arab'|'pag'|'pam'|'pap'|'pl'|'ps'|'pt'|'pt-pt'|'qu'|'rn'|'ro'|'rom'|'ru'|'rw'|'sa'|'sah'|'sat-latn'|'scn'|'sd'|'se'|'sg'|'shn'|'si'|'sk'|'sl'|'sm'|'sn'|'so'|'sq'|'sr'|'ss'|'st'|'su'|'sus'|'sv'|'sw'|'szl'|'ta'|'tcy'|'te'|'tet'|'tg'|'th'|'ti'|'tiv'|'tk'|'tl'|'tn'|'to'|'tpi'|'tr'|'trp'|'ts'|'tt'|'tum'|'ty'|'tyv'|'udm'|'ug'|'uk'|'ur'|'uz'|'ve'|'vec'|'vi'|'war'|'wo'|'xh'|'yi'|'yo'|'yua'|'yue'|'zap'|'zh-cn'|'zh-tw'|'zu'\nexport const GOOGLE_LANGUAGE: TargetFilter['google'][] = ['aa','ab','ace','ach','af','ak','alz','am','ar','as','av','awa','ay','az','ba','bal','ban','bbc','bci','be','bem','ber','ber-latn','bew','bg','bho','bik','bm','bm-nkoo','bn','bo','br','bs','bts','btx','bua','ca','ce','ceb','cgg','ch','chk','chm','ckb','cnh','co','crh','crs','cs','cv','cy','da','de','din','doi','dov','dv','dyu','dz','ee','el','en','eo','es','et','eu','fa','fa-af','ff','fi','fj','fo','fon','fr','fur','fy','ga','gaa','gd','gl','gn','gom','gu','gv','ha','haw','hi','hil','hmn','hr','hrx','ht','hu','hy','iba','id','ig','ilo','is','it','iw','ja','jam','jw','ka','kac','kek','kg','kha','kk','kl','km','kn','ko','kr','kri','ktu','ku','kv','ky','la','lb','lg','li','lij','lmo','ln','lo','lt','ltg','luo','lus','lv','mad','mai','mak','mam','mfe','mg','mh','mi','min','mk','ml','mn','mni-mtei','mr','ms','ms-arab','mt','mwr','my','ndc-zw','ne','new','nhe','nl','no','nr','nso','nus','ny','oc','om','or','os','pa','pa-arab','pag','pam','pap','pl','ps','pt','pt-pt','qu','rn','ro','rom','ru','rw','sa','sah','sat-latn','scn','sd','se','sg','shn','si','sk','sl','sm','sn','so','sq','sr','ss','st','su','sus','sv','sw','szl','ta','tcy','te','tet','tg','th','ti','tiv','tk','tl','tn','to','tpi','tr','trp','ts','tt','tum','ty','tyv','udm','ug','uk','ur','uz','ve','vec','vi','war','wo','xh','yi','yo','yua','yue','zap','zh-cn','zh-tw','zu']\nexport const GOOGLE_LANGUAGE_OBJECT: { [p in GOOGLE_LIST]: string } = {\"aa\":\"Afar\",\"ab\":\"Abkhaz\",\"ace\":\"Acehnese\",\"ach\":\"Acholi\",\"af\":\"Afrikaans\",\"ak\":\"Twi\",\"alz\":\"Alur\",\"am\":\"Amharic\",\"ar\":\"Arabic\",\"as\":\"Assamese\",\"av\":\"Avar\",\"awa\":\"Awadhi\",\"ay\":\"Aymara\",\"az\":\"Azerbaijani\",\"ba\":\"Bashkir\",\"bal\":\"Baluchi\",\"ban\":\"Balinese\",\"bbc\":\"Batak Toba\",\"bci\":\"Baoul√©\",\"be\":\"Belarusian\",\"bem\":\"Bemba\",\"ber\":\"Tamazight (Tifinagh)\",\"ber-latn\":\"Tamazight\",\"bew\":\"Betawi\",\"bg\":\"Bulgarian\",\"bho\":\"Bhojpuri\",\"bik\":\"Bikol\",\"bm\":\"Bambara\",\"bm-nkoo\":\"NKo\",\"bn\":\"Bengali\",\"bo\":\"Tibetan\",\"br\":\"Breton\",\"bs\":\"Bosnian\",\"bts\":\"Batak Simalungun\",\"btx\":\"Batak Karo\",\"bua\":\"Buryat\",\"ca\":\"Catalan\",\"ce\":\"Chechen\",\"ceb\":\"Cebuano\",\"cgg\":\"Kiga\",\"ch\":\"Chamorro\",\"chk\":\"Chuukese\",\"chm\":\"Meadow Mari\",\"ckb\":\"Kurdish (Sorani)\",\"cnh\":\"Hakha Chin\",\"co\":\"Corsican\",\"crh\":\"Crimean Tatar\",\"crs\":\"Seychellois Creole\",\"cs\":\"Czech\",\"cv\":\"Chuvash\",\"cy\":\"Welsh\",\"da\":\"Danish\",\"de\":\"German\",\"din\":\"Dinka\",\"doi\":\"Dogri\",\"dov\":\"Dombe\",\"dv\":\"Dhivehi\",\"dyu\":\"Dyula\",\"dz\":\"Dzongkha\",\"ee\":\"Ewe\",\"el\":\"Greek\",\"en\":\"English\",\"eo\":\"Esperanto\",\"es\":\"Spanish\",\"et\":\"Estonian\",\"eu\":\"Basque\",\"fa\":\"Persian\",\"fa-af\":\"Dari\",\"ff\":\"Fulani\",\"fi\":\"Finnish\",\"fj\":\"Fijian\",\"fo\":\"Faroese\",\"fon\":\"Fon\",\"fr\":\"French\",\"fur\":\"Friulian\",\"fy\":\"Frisian\",\"ga\":\"Irish\",\"gaa\":\"Ga\",\"gd\":\"Scots Gaelic\",\"gl\":\"Galician\",\"gn\":\"Guarani\",\"gom\":\"Konkani\",\"gu\":\"Gujarati\",\"gv\":\"Manx\",\"ha\":\"Hausa\",\"haw\":\"Hawaiian\",\"hi\":\"Hindi\",\"hil\":\"Hiligaynon\",\"hmn\":\"Hmong\",\"hr\":\"Croatian\",\"hrx\":\"Hunsrik\",\"ht\":\"Haitian Creole\",\"hu\":\"Hungarian\",\"hy\":\"Armenian\",\"iba\":\"Iban\",\"id\":\"Indonesian\",\"ig\":\"Igbo\",\"ilo\":\"Ilocano\",\"is\":\"Icelandic\",\"it\":\"Italian\",\"iw\":\"Hebrew\",\"ja\":\"Japanese\",\"jam\":\"Jamaican Patois\",\"jw\":\"Javanese\",\"ka\":\"Georgian\",\"kac\":\"Jingpo\",\"kek\":\"Q ºeqchi º\",\"kg\":\"Kikongo\",\"kha\":\"Khasi\",\"kk\":\"Kazakh\",\"kl\":\"Kalaallisut\",\"km\":\"Khmer\",\"kn\":\"Kannada\",\"ko\":\"Korean\",\"kr\":\"Kanuri\",\"kri\":\"Krio\",\"ktu\":\"Kituba\",\"ku\":\"Kurdish (Kurmanji)\",\"kv\":\"Komi\",\"ky\":\"Kyrgyz\",\"la\":\"Latin\",\"lb\":\"Luxembourgish\",\"lg\":\"Luganda\",\"li\":\"Limburgish\",\"lij\":\"Ligurian\",\"lmo\":\"Lombard\",\"ln\":\"Lingala\",\"lo\":\"Lao\",\"lt\":\"Lithuanian\",\"ltg\":\"Latgalian\",\"luo\":\"Luo\",\"lus\":\"Mizo\",\"lv\":\"Latvian\",\"mad\":\"Madurese\",\"mai\":\"Maithili\",\"mak\":\"Makassar\",\"mam\":\"Mam\",\"mfe\":\"Mauritian Creole\",\"mg\":\"Malagasy\",\"mh\":\"Marshallese\",\"mi\":\"Maori\",\"min\":\"Minang\",\"mk\":\"Macedonian\",\"ml\":\"Malayalam\",\"mn\":\"Mongolian\",\"mni-mtei\":\"Meiteilon (Manipuri)\",\"mr\":\"Marathi\",\"ms\":\"Malay\",\"ms-arab\":\"Malay (Jawi)\",\"mt\":\"Maltese\",\"mwr\":\"Marwadi\",\"my\":\"Myanmar (Burmese)\",\"ndc-zw\":\"Ndau\",\"ne\":\"Nepali\",\"new\":\"Nepalbhasa (Newari)\",\"nhe\":\"Nahuatl (Eastern Huasteca)\",\"nl\":\"Dutch\",\"no\":\"Norwegian\",\"nr\":\"Ndebele (South)\",\"nso\":\"Sepedi\",\"nus\":\"Nuer\",\"ny\":\"Chichewa\",\"oc\":\"Occitan\",\"om\":\"Oromo\",\"or\":\"Odia (Oriya)\",\"os\":\"Ossetian\",\"pa\":\"Punjabi (Gurmukhi)\",\"pa-arab\":\"Punjabi (Shahmukhi)\",\"pag\":\"Pangasinan\",\"pam\":\"Kapampangan\",\"pap\":\"Papiamento\",\"pl\":\"Polish\",\"ps\":\"Pashto\",\"pt\":\"Portuguese (Brazil)\",\"pt-pt\":\"Portuguese (Portugal)\",\"qu\":\"Quechua\",\"rn\":\"Rundi\",\"ro\":\"Romanian\",\"rom\":\"Romani\",\"ru\":\"Russian\",\"rw\":\"Kinyarwanda\",\"sa\":\"Sanskrit\",\"sah\":\"Yakut\",\"sat-latn\":\"Santali\",\"scn\":\"Sicilian\",\"sd\":\"Sindhi\",\"se\":\"Sami (North)\",\"sg\":\"Sango\",\"shn\":\"Shan\",\"si\":\"Sinhala\",\"sk\":\"Slovak\",\"sl\":\"Slovenian\",\"sm\":\"Samoan\",\"sn\":\"Shona\",\"so\":\"Somali\",\"sq\":\"Albanian\",\"sr\":\"Serbian\",\"ss\":\"Swati\",\"st\":\"Sesotho\",\"su\":\"Sundanese\",\"sus\":\"Susu\",\"sv\":\"Swedish\",\"sw\":\"Swahili\",\"szl\":\"Silesian\",\"ta\":\"Tamil\",\"tcy\":\"Tulu\",\"te\":\"Telugu\",\"tet\":\"Tetum\",\"tg\":\"Tajik\",\"th\":\"Thai\",\"ti\":\"Tigrinya\",\"tiv\":\"Tiv\",\"tk\":\"Turkmen\",\"tl\":\"Filipino\",\"tn\":\"Tswana\",\"to\":\"Tongan\",\"tpi\":\"Tok Pisin\",\"tr\":\"Turkish\",\"trp\":\"Kokborok\",\"ts\":\"Tsonga\",\"tt\":\"Tatar\",\"tum\":\"Tumbuka\",\"ty\":\"Tahitian\",\"tyv\":\"Tuvan\",\"udm\":\"Udmurt\",\"ug\":\"Uyghur\",\"uk\":\"Ukrainian\",\"ur\":\"Urdu\",\"uz\":\"Uzbek\",\"ve\":\"Venda\",\"vec\":\"Venetian\",\"vi\":\"Vietnamese\",\"war\":\"Waray\",\"wo\":\"Wolof\",\"xh\":\"Xhosa\",\"yi\":\"Yiddish\",\"yo\":\"Yoruba\",\"yua\":\"Yucatec Maya\",\"yue\":\"Cantonese\",\"zap\":\"Zapotec\",\"zh-cn\":\"Chinese (Simplified)\",\"zh-tw\":\"Chinese (Traditional)\",\"zu\":\"Zulu\"}\nexport type BING_LIST = 'af'|'am'|'ar'|'as'|'az'|'ba'|'bg'|'bho'|'bn'|'bo'|'brx'|'bs'|'ca'|'cs'|'cy'|'da'|'de'|'doi'|'dsb'|'dv'|'el'|'en'|'es'|'et'|'eu'|'fa'|'fi'|'fil'|'fj'|'fo'|'fr'|'fr-ca'|'ga'|'gl'|'gom'|'gu'|'ha'|'he'|'hi'|'hr'|'hsb'|'ht'|'hu'|'hy'|'id'|'ig'|'ikt'|'is'|'it'|'iu'|'iu-latn'|'ja'|'ka'|'kk'|'km'|'kmr'|'kn'|'ko'|'ks'|'ku'|'ky'|'ln'|'lo'|'lt'|'lug'|'lv'|'lzh'|'mai'|'mg'|'mi'|'mk'|'ml'|'mn-cyrl'|'mn-mong'|'mr'|'ms'|'mt'|'mww'|'my'|'nb'|'ne'|'nl'|'nso'|'nya'|'or'|'otq'|'pa'|'pl'|'prs'|'ps'|'pt'|'pt-pt'|'ro'|'ru'|'run'|'rw'|'sd'|'si'|'sk'|'sl'|'sm'|'sn'|'so'|'sq'|'sr-cyrl'|'sr-latn'|'st'|'sv'|'sw'|'ta'|'te'|'th'|'ti'|'tk'|'tlh-latn'|'tn'|'to'|'tr'|'tt'|'ty'|'ug'|'uk'|'ur'|'uz'|'vi'|'xh'|'yo'|'yua'|'yue'|'zh-hans'|'zh-hant'|'zu'\nexport const BING_LANGUAGE: TargetFilter['microsoft'][] = ['af','am','ar','as','az','ba','bg','bho','bn','bo','brx','bs','ca','cs','cy','da','de','doi','dsb','dv','el','en','es','et','eu','fa','fi','fil','fj','fo','fr','fr-ca','ga','gl','gom','gu','ha','he','hi','hr','hsb','ht','hu','hy','id','ig','ikt','is','it','iu','iu-latn','ja','ka','kk','km','kmr','kn','ko','ks','ku','ky','ln','lo','lt','lug','lv','lzh','mai','mg','mi','mk','ml','mn-cyrl','mn-mong','mr','ms','mt','mww','my','nb','ne','nl','nso','nya','or','otq','pa','pl','prs','ps','pt','pt-pt','ro','ru','run','rw','sd','si','sk','sl','sm','sn','so','sq','sr-cyrl','sr-latn','st','sv','sw','ta','te','th','ti','tk','tlh-latn','tn','to','tr','tt','ty','ug','uk','ur','uz','vi','xh','yo','yua','yue','zh-hans','zh-hant','zu']\nexport const BING_LANGUAGE_OBJECT: { [p in BING_LIST]: string } = {\"af\":\"Afrikaans\",\"am\":\"Amharic\",\"ar\":\"Arabic\",\"as\":\"Assamese\",\"az\":\"Azerbaijani\",\"ba\":\"Bashkir\",\"bg\":\"Bulgarian\",\"bho\":\"Bhojpuri\",\"bn\":\"Bangla\",\"bo\":\"Tibetan\",\"brx\":\"Bodo\",\"bs\":\"Bosnian\",\"ca\":\"Catalan\",\"cs\":\"Czech\",\"cy\":\"Welsh\",\"da\":\"Danish\",\"de\":\"German\",\"doi\":\"Dogri\",\"dsb\":\"Lower Sorbian\",\"dv\":\"Divehi\",\"el\":\"Greek\",\"en\":\"English\",\"es\":\"Spanish\",\"et\":\"Estonian\",\"eu\":\"Basque\",\"fa\":\"Persian\",\"fi\":\"Finnish\",\"fil\":\"Filipino\",\"fj\":\"Fijian\",\"fo\":\"Faroese\",\"fr\":\"French\",\"fr-ca\":\"French (Canada)\",\"ga\":\"Irish\",\"gl\":\"Galician\",\"gom\":\"Konkani\",\"gu\":\"Gujarati\",\"ha\":\"Hausa\",\"he\":\"Hebrew\",\"hi\":\"Hindi\",\"hr\":\"Croatian\",\"hsb\":\"Upper Sorbian\",\"ht\":\"Haitian Creole\",\"hu\":\"Hungarian\",\"hy\":\"Armenian\",\"id\":\"Indonesian\",\"ig\":\"Igbo\",\"ikt\":\"Inuinnaqtun\",\"is\":\"Icelandic\",\"it\":\"Italian\",\"iu\":\"Inuktitut\",\"iu-latn\":\"Inuktitut (Latin)\",\"ja\":\"Japanese\",\"ka\":\"Georgian\",\"kk\":\"Kazakh\",\"km\":\"Khmer\",\"kmr\":\"Kurdish (Northern)\",\"kn\":\"Kannada\",\"ko\":\"Korean\",\"ks\":\"Kashmiri\",\"ku\":\"Kurdish (Central)\",\"ky\":\"Kyrgyz\",\"ln\":\"Lingala\",\"lo\":\"Lao\",\"lt\":\"Lithuanian\",\"lug\":\"Ganda\",\"lv\":\"Latvian\",\"lzh\":\"Chinese (Literary)\",\"mai\":\"Maithili\",\"mg\":\"Malagasy\",\"mi\":\"MƒÅori\",\"mk\":\"Macedonian\",\"ml\":\"Malayalam\",\"mn-cyrl\":\"Mongolian (Cyrillic)\",\"mn-mong\":\"Mongolian (Traditional)\",\"mr\":\"Marathi\",\"ms\":\"Malay\",\"mt\":\"Maltese\",\"mww\":\"Hmong Daw\",\"my\":\"Myanmar (Burmese)\",\"nb\":\"Norwegian\",\"ne\":\"Nepali\",\"nl\":\"Dutch\",\"nso\":\"Sesotho sa Leboa\",\"nya\":\"Nyanja\",\"or\":\"Odia\",\"otq\":\"Quer√©taro Otomi\",\"pa\":\"Punjabi\",\"pl\":\"Polish\",\"prs\":\"Dari\",\"ps\":\"Pashto\",\"pt\":\"Portuguese (Brazil)\",\"pt-pt\":\"Portuguese (Portugal)\",\"ro\":\"Romanian\",\"ru\":\"Russian\",\"run\":\"Rundi\",\"rw\":\"Kinyarwanda\",\"sd\":\"Sindhi\",\"si\":\"Sinhala\",\"sk\":\"Slovak\",\"sl\":\"Slovenian\",\"sm\":\"Samoan\",\"sn\":\"Shona\",\"so\":\"Somali\",\"sq\":\"Albanian\",\"sr-cyrl\":\"Serbian (Cyrillic)\",\"sr-latn\":\"Serbian (Latin)\",\"st\":\"Sesotho\",\"sv\":\"Swedish\",\"sw\":\"Swahili\",\"ta\":\"Tamil\",\"te\":\"Telugu\",\"th\":\"Thai\",\"ti\":\"Tigrinya\",\"tk\":\"Turkmen\",\"tlh-latn\":\"Klingon (Latin)\",\"tn\":\"Setswana\",\"to\":\"Tongan\",\"tr\":\"Turkish\",\"tt\":\"Tatar\",\"ty\":\"Tahitian\",\"ug\":\"Uyghur\",\"uk\":\"Ukrainian\",\"ur\":\"Urdu\",\"uz\":\"Uzbek (Latin)\",\"vi\":\"Vietnamese\",\"xh\":\"Xhosa\",\"yo\":\"Yoruba\",\"yua\":\"Yucatec Maya\",\"yue\":\"Cantonese (Traditional)\",\"zh-hans\":\"Chinese Simplified\",\"zh-hant\":\"Chinese Traditional\",\"zu\":\"Zulu\"}\nexport type BING_TTS_LIST = 'af'|'am'|'ar'|'bn'|'bg'|'ca'|'cs'|'cy'|'da'|'de'|'el'|'en'|'es'|'et'|'fa'|'fi'|'fr'|'fr-ca'|'ga'|'gu'|'he'|'hi'|'hr'|'hu'|'id'|'is'|'it'|'ja'|'kk'|'km'|'kn'|'ko'|'lo'|'lv'|'lt'|'mk'|'ml'|'mr'|'ms'|'mt'|'my'|'nl'|'nb'|'pl'|'ps'|'pt'|'pt-pt'|'ro'|'ru'|'sk'|'sl'|'sr-cyrl'|'sv'|'ta'|'te'|'th'|'tr'|'uk'|'ur'|'uz'|'vi'|'zh-hans'|'zh-hant'|'yue'\nexport const MICROSOFT_TTS_LIST: { code: BING_TTS_LIST; language: string; gender: 'Male' | 'Female'; model: string }[] = [{\"code\":\"af\",\"language\":\"af-ZA\",\"gender\":\"Female\",\"model\":\"af-ZA-AdriNeural\"},{\"code\":\"am\",\"language\":\"am-ET\",\"gender\":\"Female\",\"model\":\"am-ET-MekdesNeural\"},{\"code\":\"ar\",\"language\":\"ar-SA\",\"gender\":\"Male\",\"model\":\"ar-SA-HamedNeural\"},{\"code\":\"bn\",\"language\":\"bn-IN\",\"gender\":\"Female\",\"model\":\"bn-IN-TanishaaNeural\"},{\"code\":\"bg\",\"language\":\"bg-BG\",\"gender\":\"Male\",\"model\":\"bg-BG-BorislavNeural\"},{\"code\":\"ca\",\"language\":\"ca-ES\",\"gender\":\"Female\",\"model\":\"ca-ES-JoanaNeural\"},{\"code\":\"cs\",\"language\":\"cs-CZ\",\"gender\":\"Male\",\"model\":\"cs-CZ-AntoninNeural\"},{\"code\":\"cy\",\"language\":\"cy-GB\",\"gender\":\"Female\",\"model\":\"cy-GB-NiaNeural\"},{\"code\":\"da\",\"language\":\"da-DK\",\"gender\":\"Female\",\"model\":\"da-DK-ChristelNeural\"},{\"code\":\"de\",\"language\":\"de-DE\",\"gender\":\"Female\",\"model\":\"de-DE-KatjaNeural\"},{\"code\":\"el\",\"language\":\"el-GR\",\"gender\":\"Male\",\"model\":\"el-GR-NestorasNeural\"},{\"code\":\"en\",\"language\":\"en-US\",\"gender\":\"Female\",\"model\":\"en-US-AriaNeural\"},{\"code\":\"es\",\"language\":\"es-ES\",\"gender\":\"Female\",\"model\":\"es-ES-ElviraNeural\"},{\"code\":\"et\",\"language\":\"et-EE\",\"gender\":\"Female\",\"model\":\"et-EE-AnuNeural\"},{\"code\":\"fa\",\"language\":\"fa-IR\",\"gender\":\"Female\",\"model\":\"fa-IR-DilaraNeural\"},{\"code\":\"fi\",\"language\":\"fi-FI\",\"gender\":\"Female\",\"model\":\"fi-FI-NooraNeural\"},{\"code\":\"fr\",\"language\":\"fr-FR\",\"gender\":\"Female\",\"model\":\"fr-FR-DeniseNeural\"},{\"code\":\"fr-ca\",\"language\":\"fr-CA\",\"gender\":\"Female\",\"model\":\"fr-CA-SylvieNeural\"},{\"code\":\"ga\",\"language\":\"ga-IE\",\"gender\":\"Female\",\"model\":\"ga-IE-OrlaNeural\"},{\"code\":\"gu\",\"language\":\"gu-IN\",\"gender\":\"Female\",\"model\":\"gu-IN-DhwaniNeural\"},{\"code\":\"he\",\"language\":\"he-IL\",\"gender\":\"Male\",\"model\":\"he-IL-AvriNeural\"},{\"code\":\"hi\",\"language\":\"hi-IN\",\"gender\":\"Female\",\"model\":\"hi-IN-SwaraNeural\"},{\"code\":\"hr\",\"language\":\"hr-HR\",\"gender\":\"Male\",\"model\":\"hr-HR-SreckoNeural\"},{\"code\":\"hu\",\"language\":\"hu-HU\",\"gender\":\"Male\",\"model\":\"hu-HU-TamasNeural\"},{\"code\":\"id\",\"language\":\"id-ID\",\"gender\":\"Male\",\"model\":\"id-ID-ArdiNeural\"},{\"code\":\"is\",\"language\":\"is-IS\",\"gender\":\"Female\",\"model\":\"is-IS-GudrunNeural\"},{\"code\":\"it\",\"language\":\"it-IT\",\"gender\":\"Male\",\"model\":\"it-IT-DiegoNeural\"},{\"code\":\"ja\",\"language\":\"ja-JP\",\"gender\":\"Female\",\"model\":\"ja-JP-NanamiNeural\"},{\"code\":\"kk\",\"language\":\"kk-KZ\",\"gender\":\"Female\",\"model\":\"kk-KZ-AigulNeural\"},{\"code\":\"km\",\"language\":\"km-KH\",\"gender\":\"Female\",\"model\":\"km-KH-SreymomNeural\"},{\"code\":\"kn\",\"language\":\"kn-IN\",\"gender\":\"Female\",\"model\":\"kn-IN-SapnaNeural\"},{\"code\":\"ko\",\"language\":\"ko-KR\",\"gender\":\"Female\",\"model\":\"ko-KR-SunHiNeural\"},{\"code\":\"lo\",\"language\":\"lo-LA\",\"gender\":\"Female\",\"model\":\"lo-LA-KeomanyNeural\"},{\"code\":\"lv\",\"language\":\"lv-LV\",\"gender\":\"Female\",\"model\":\"lv-LV-EveritaNeural\"},{\"code\":\"lt\",\"language\":\"lt-LT\",\"gender\":\"Female\",\"model\":\"lt-LT-OnaNeural\"},{\"code\":\"mk\",\"language\":\"mk-MK\",\"gender\":\"Female\",\"model\":\"mk-MK-MarijaNeural\"},{\"code\":\"ml\",\"language\":\"ml-IN\",\"gender\":\"Female\",\"model\":\"ml-IN-SobhanaNeural\"},{\"code\":\"mr\",\"language\":\"mr-IN\",\"gender\":\"Female\",\"model\":\"mr-IN-AarohiNeural\"},{\"code\":\"ms\",\"language\":\"ms-MY\",\"gender\":\"Male\",\"model\":\"ms-MY-OsmanNeural\"},{\"code\":\"mt\",\"language\":\"mt-MT\",\"gender\":\"Female\",\"model\":\"mt-MT-GraceNeural\"},{\"code\":\"my\",\"language\":\"my-MM\",\"gender\":\"Female\",\"model\":\"my-MM-NilarNeural\"},{\"code\":\"nl\",\"language\":\"nl-NL\",\"gender\":\"Female\",\"model\":\"nl-NL-ColetteNeural\"},{\"code\":\"nb\",\"language\":\"nb-NO\",\"gender\":\"Female\",\"model\":\"nb-NO-PernilleNeural\"},{\"code\":\"pl\",\"language\":\"pl-PL\",\"gender\":\"Female\",\"model\":\"pl-PL-ZofiaNeural\"},{\"code\":\"ps\",\"language\":\"ps-AF\",\"gender\":\"Female\",\"model\":\"ps-AF-LatifaNeural\"},{\"code\":\"pt\",\"language\":\"pt-BR\",\"gender\":\"Female\",\"model\":\"pt-BR-FranciscaNeural\"},{\"code\":\"pt-pt\",\"language\":\"pt-PT\",\"gender\":\"Female\",\"model\":\"pt-PT-FernandaNeural\"},{\"code\":\"ro\",\"language\":\"ro-RO\",\"gender\":\"Male\",\"model\":\"ro-RO-EmilNeural\"},{\"code\":\"ru\",\"language\":\"ru-RU\",\"gender\":\"Female\",\"model\":\"ru-RU-DariyaNeural\"},{\"code\":\"sk\",\"language\":\"sk-SK\",\"gender\":\"Male\",\"model\":\"sk-SK-LukasNeural\"},{\"code\":\"sl\",\"language\":\"sl-SI\",\"gender\":\"Male\",\"model\":\"sl-SI-RokNeural\"},{\"code\":\"sr-cyrl\",\"language\":\"sr-RS\",\"gender\":\"Female\",\"model\":\"sr-RS-SophieNeural\"},{\"code\":\"sv\",\"language\":\"sv-SE\",\"gender\":\"Female\",\"model\":\"sv-SE-SofieNeural\"},{\"code\":\"ta\",\"language\":\"ta-IN\",\"gender\":\"Female\",\"model\":\"ta-IN-PallaviNeural\"},{\"code\":\"te\",\"language\":\"te-IN\",\"gender\":\"Male\",\"model\":\"te-IN-ShrutiNeural\"},{\"code\":\"th\",\"language\":\"th-TH\",\"gender\":\"Male\",\"model\":\"th-TH-NiwatNeural\"},{\"code\":\"tr\",\"language\":\"tr-TR\",\"gender\":\"Female\",\"model\":\"tr-TR-EmelNeural\"},{\"code\":\"uk\",\"language\":\"uk-UA\",\"gender\":\"Female\",\"model\":\"uk-UA-PolinaNeural\"},{\"code\":\"ur\",\"language\":\"ur-IN\",\"gender\":\"Female\",\"model\":\"ur-IN-GulNeural\"},{\"code\":\"uz\",\"language\":\"uz-UZ\",\"gender\":\"Female\",\"model\":\"uz-UZ-MadinaNeural\"},{\"code\":\"vi\",\"language\":\"vi-VN\",\"gender\":\"Male\",\"model\":\"vi-VN-NamMinhNeural\"},{\"code\":\"zh-hans\",\"language\":\"zh-CN\",\"gender\":\"Female\",\"model\":\"zh-CN-XiaoxiaoNeural\"},{\"code\":\"zh-hant\",\"language\":\"zh-CN\",\"gender\":\"Female\",\"model\":\"zh-CN-XiaoxiaoNeural\"},{\"code\":\"yue\",\"language\":\"zh-HK\",\"gender\":\"Female\",\"model\":\"zh-HK-HiuGaaiNeural\"}]\nexport type MICROSOFT_EDGE_TTS_TYPE = 'af-ZA'|'sq-AL'|'am-ET'|'ar-DZ'|'ar-BH'|'ar-EG'|'ar-IQ'|'ar-JO'|'ar-KW'|'ar-LB'|'ar-LY'|'ar-MA'|'ar-OM'|'ar-QA'|'ar-SA'|'ar-SY'|'ar-TN'|'ar-AE'|'ar-YE'|'az-AZ'|'bn-BD'|'bn-IN'|'bs-BA'|'bg-BG'|'my-MM'|'ca-ES'|'zh-HK'|'zh-CN'|'zh-CN-liaoning'|'zh-TW'|'zh-CN-shaanxi'|'hr-HR'|'cs-CZ'|'da-DK'|'nl-BE'|'nl-NL'|'en-AU'|'en-CA'|'en-HK'|'en-IN'|'en-IE'|'en-KE'|'en-NZ'|'en-NG'|'en-PH'|'en-US'|'en-SG'|'en-ZA'|'en-TZ'|'en-GB'|'et-EE'|'fil-PH'|'fi-FI'|'fr-BE'|'fr-CA'|'fr-FR'|'fr-CH'|'gl-ES'|'ka-GE'|'de-AT'|'de-DE'|'de-CH'|'el-GR'|'gu-IN'|'he-IL'|'hi-IN'|'hu-HU'|'is-IS'|'id-ID'|'ga-IE'|'it-IT'|'ja-JP'|'jv-ID'|'kn-IN'|'kk-KZ'|'km-KH'|'ko-KR'|'lo-LA'|'lv-LV'|'lt-LT'|'mk-MK'|'ms-MY'|'ml-IN'|'mt-MT'|'mr-IN'|'mn-MN'|'ne-NP'|'nb-NO'|'ps-AF'|'fa-IR'|'pl-PL'|'pt-BR'|'pt-PT'|'ro-RO'|'ru-RU'|'sr-RS'|'si-LK'|'sk-SK'|'sl-SI'|'so-SO'|'es-AR'|'es-BO'|'es-CL'|'es-ES'|'es-CO'|'es-CR'|'es-CU'|'es-DO'|'es-EC'|'es-SV'|'es-GQ'|'es-GT'|'es-HN'|'es-MX'|'es-NI'|'es-PA'|'es-PY'|'es-PE'|'es-PR'|'es-US'|'es-UY'|'es-VE'|'su-ID'|'sw-KE'|'sw-TZ'|'sv-SE'|'ta-IN'|'ta-MY'|'ta-SG'|'ta-LK'|'te-IN'|'th-TH'|'tr-TR'|'uk-UA'|'ur-IN'|'ur-PK'|'uz-UZ'|'vi-VN'|'cy-GB'|'zu-ZA'\nexport const MICROSOFT_EDGE_TTS_LIST: { language: MICROSOFT_EDGE_TTS_TYPE; gender: 'Male' | 'Female'; model: string }[] = [{\"language\":\"af-ZA\",\"gender\":\"Female\",\"model\":\"af-ZA-AdriNeural\"},{\"language\":\"af-ZA\",\"gender\":\"Male\",\"model\":\"af-ZA-WillemNeural\"},{\"language\":\"sq-AL\",\"gender\":\"Female\",\"model\":\"sq-AL-AnilaNeural\"},{\"language\":\"sq-AL\",\"gender\":\"Male\",\"model\":\"sq-AL-IlirNeural\"},{\"language\":\"am-ET\",\"gender\":\"Male\",\"model\":\"am-ET-AmehaNeural\"},{\"language\":\"am-ET\",\"gender\":\"Female\",\"model\":\"am-ET-MekdesNeural\"},{\"language\":\"ar-DZ\",\"gender\":\"Female\",\"model\":\"ar-DZ-AminaNeural\"},{\"language\":\"ar-DZ\",\"gender\":\"Male\",\"model\":\"ar-DZ-IsmaelNeural\"},{\"language\":\"ar-BH\",\"gender\":\"Male\",\"model\":\"ar-BH-AliNeural\"},{\"language\":\"ar-BH\",\"gender\":\"Female\",\"model\":\"ar-BH-LailaNeural\"},{\"language\":\"ar-EG\",\"gender\":\"Female\",\"model\":\"ar-EG-SalmaNeural\"},{\"language\":\"ar-EG\",\"gender\":\"Male\",\"model\":\"ar-EG-ShakirNeural\"},{\"language\":\"ar-IQ\",\"gender\":\"Male\",\"model\":\"ar-IQ-BasselNeural\"},{\"language\":\"ar-IQ\",\"gender\":\"Female\",\"model\":\"ar-IQ-RanaNeural\"},{\"language\":\"ar-JO\",\"gender\":\"Female\",\"model\":\"ar-JO-SanaNeural\"},{\"language\":\"ar-JO\",\"gender\":\"Male\",\"model\":\"ar-JO-TaimNeural\"},{\"language\":\"ar-KW\",\"gender\":\"Male\",\"model\":\"ar-KW-FahedNeural\"},{\"language\":\"ar-KW\",\"gender\":\"Female\",\"model\":\"ar-KW-NouraNeural\"},{\"language\":\"ar-LB\",\"gender\":\"Female\",\"model\":\"ar-LB-LaylaNeural\"},{\"language\":\"ar-LB\",\"gender\":\"Male\",\"model\":\"ar-LB-RamiNeural\"},{\"language\":\"ar-LY\",\"gender\":\"Female\",\"model\":\"ar-LY-ImanNeural\"},{\"language\":\"ar-LY\",\"gender\":\"Male\",\"model\":\"ar-LY-OmarNeural\"},{\"language\":\"ar-MA\",\"gender\":\"Male\",\"model\":\"ar-MA-JamalNeural\"},{\"language\":\"ar-MA\",\"gender\":\"Female\",\"model\":\"ar-MA-MounaNeural\"},{\"language\":\"ar-OM\",\"gender\":\"Male\",\"model\":\"ar-OM-AbdullahNeural\"},{\"language\":\"ar-OM\",\"gender\":\"Female\",\"model\":\"ar-OM-AyshaNeural\"},{\"language\":\"ar-QA\",\"gender\":\"Female\",\"model\":\"ar-QA-AmalNeural\"},{\"language\":\"ar-QA\",\"gender\":\"Male\",\"model\":\"ar-QA-MoazNeural\"},{\"language\":\"ar-SA\",\"gender\":\"Male\",\"model\":\"ar-SA-HamedNeural\"},{\"language\":\"ar-SA\",\"gender\":\"Female\",\"model\":\"ar-SA-ZariyahNeural\"},{\"language\":\"ar-SY\",\"gender\":\"Female\",\"model\":\"ar-SY-AmanyNeural\"},{\"language\":\"ar-SY\",\"gender\":\"Male\",\"model\":\"ar-SY-LaithNeural\"},{\"language\":\"ar-TN\",\"gender\":\"Male\",\"model\":\"ar-TN-HediNeural\"},{\"language\":\"ar-TN\",\"gender\":\"Female\",\"model\":\"ar-TN-ReemNeural\"},{\"language\":\"ar-AE\",\"gender\":\"Female\",\"model\":\"ar-AE-FatimaNeural\"},{\"language\":\"ar-AE\",\"gender\":\"Male\",\"model\":\"ar-AE-HamdanNeural\"},{\"language\":\"ar-YE\",\"gender\":\"Female\",\"model\":\"ar-YE-MaryamNeural\"},{\"language\":\"ar-YE\",\"gender\":\"Male\",\"model\":\"ar-YE-SalehNeural\"},{\"language\":\"az-AZ\",\"gender\":\"Male\",\"model\":\"az-AZ-BabekNeural\"},{\"language\":\"az-AZ\",\"gender\":\"Female\",\"model\":\"az-AZ-BanuNeural\"},{\"language\":\"bn-BD\",\"gender\":\"Female\",\"model\":\"bn-BD-NabanitaNeural\"},{\"language\":\"bn-BD\",\"gender\":\"Male\",\"model\":\"bn-BD-PradeepNeural\"},{\"language\":\"bn-IN\",\"gender\":\"Male\",\"model\":\"bn-IN-BashkarNeural\"},{\"language\":\"bn-IN\",\"gender\":\"Female\",\"model\":\"bn-IN-TanishaaNeural\"},{\"language\":\"bs-BA\",\"gender\":\"Male\",\"model\":\"bs-BA-GoranNeural\"},{\"language\":\"bs-BA\",\"gender\":\"Female\",\"model\":\"bs-BA-VesnaNeural\"},{\"language\":\"bg-BG\",\"gender\":\"Male\",\"model\":\"bg-BG-BorislavNeural\"},{\"language\":\"bg-BG\",\"gender\":\"Female\",\"model\":\"bg-BG-KalinaNeural\"},{\"language\":\"my-MM\",\"gender\":\"Female\",\"model\":\"my-MM-NilarNeural\"},{\"language\":\"my-MM\",\"gender\":\"Male\",\"model\":\"my-MM-ThihaNeural\"},{\"language\":\"ca-ES\",\"gender\":\"Male\",\"model\":\"ca-ES-EnricNeural\"},{\"language\":\"ca-ES\",\"gender\":\"Female\",\"model\":\"ca-ES-JoanaNeural\"},{\"language\":\"zh-HK\",\"gender\":\"Female\",\"model\":\"zh-HK-HiuGaaiNeural\"},{\"language\":\"zh-HK\",\"gender\":\"Female\",\"model\":\"zh-HK-HiuMaanNeural\"},{\"language\":\"zh-HK\",\"gender\":\"Male\",\"model\":\"zh-HK-WanLungNeural\"},{\"language\":\"zh-CN\",\"gender\":\"Female\",\"model\":\"zh-CN-XiaoxiaoNeural\"},{\"language\":\"zh-CN\",\"gender\":\"Female\",\"model\":\"zh-CN-XiaoyiNeural\"},{\"language\":\"zh-CN\",\"gender\":\"Male\",\"model\":\"zh-CN-YunjianNeural\"},{\"language\":\"zh-CN\",\"gender\":\"Male\",\"model\":\"zh-CN-YunxiNeural\"},{\"language\":\"zh-CN\",\"gender\":\"Male\",\"model\":\"zh-CN-YunxiaNeural\"},{\"language\":\"zh-CN\",\"gender\":\"Male\",\"model\":\"zh-CN-YunyangNeural\"},{\"language\":\"zh-CN-liaoning\",\"gender\":\"Female\",\"model\":\"zh-CN-liaoning-XiaobeiNeural\"},{\"language\":\"zh-TW\",\"gender\":\"Female\",\"model\":\"zh-TW-HsiaoChenNeural\"},{\"language\":\"zh-TW\",\"gender\":\"Male\",\"model\":\"zh-TW-YunJheNeural\"},{\"language\":\"zh-TW\",\"gender\":\"Female\",\"model\":\"zh-TW-HsiaoYuNeural\"},{\"language\":\"zh-CN-shaanxi\",\"gender\":\"Female\",\"model\":\"zh-CN-shaanxi-XiaoniNeural\"},{\"language\":\"hr-HR\",\"gender\":\"Female\",\"model\":\"hr-HR-GabrijelaNeural\"},{\"language\":\"hr-HR\",\"gender\":\"Male\",\"model\":\"hr-HR-SreckoNeural\"},{\"language\":\"cs-CZ\",\"gender\":\"Male\",\"model\":\"cs-CZ-AntoninNeural\"},{\"language\":\"cs-CZ\",\"gender\":\"Female\",\"model\":\"cs-CZ-VlastaNeural\"},{\"language\":\"da-DK\",\"gender\":\"Female\",\"model\":\"da-DK-ChristelNeural\"},{\"language\":\"da-DK\",\"gender\":\"Male\",\"model\":\"da-DK-JeppeNeural\"},{\"language\":\"nl-BE\",\"gender\":\"Male\",\"model\":\"nl-BE-ArnaudNeural\"},{\"language\":\"nl-BE\",\"gender\":\"Female\",\"model\":\"nl-BE-DenaNeural\"},{\"language\":\"nl-NL\",\"gender\":\"Female\",\"model\":\"nl-NL-ColetteNeural\"},{\"language\":\"nl-NL\",\"gender\":\"Female\",\"model\":\"nl-NL-FennaNeural\"},{\"language\":\"nl-NL\",\"gender\":\"Male\",\"model\":\"nl-NL-MaartenNeural\"},{\"language\":\"en-AU\",\"gender\":\"Female\",\"model\":\"en-AU-NatashaNeural\"},{\"language\":\"en-AU\",\"gender\":\"Male\",\"model\":\"en-AU-WilliamNeural\"},{\"language\":\"en-CA\",\"gender\":\"Female\",\"model\":\"en-CA-ClaraNeural\"},{\"language\":\"en-CA\",\"gender\":\"Male\",\"model\":\"en-CA-LiamNeural\"},{\"language\":\"en-HK\",\"gender\":\"Male\",\"model\":\"en-HK-SamNeural\"},{\"language\":\"en-HK\",\"gender\":\"Female\",\"model\":\"en-HK-YanNeural\"},{\"language\":\"en-IN\",\"gender\":\"Female\",\"model\":\"en-IN-NeerjaExpressiveNeural\"},{\"language\":\"en-IN\",\"gender\":\"Female\",\"model\":\"en-IN-NeerjaNeural\"},{\"language\":\"en-IN\",\"gender\":\"Male\",\"model\":\"en-IN-PrabhatNeural\"},{\"language\":\"en-IE\",\"gender\":\"Male\",\"model\":\"en-IE-ConnorNeural\"},{\"language\":\"en-IE\",\"gender\":\"Female\",\"model\":\"en-IE-EmilyNeural\"},{\"language\":\"en-KE\",\"gender\":\"Female\",\"model\":\"en-KE-AsiliaNeural\"},{\"language\":\"en-KE\",\"gender\":\"Male\",\"model\":\"en-KE-ChilembaNeural\"},{\"language\":\"en-NZ\",\"gender\":\"Male\",\"model\":\"en-NZ-MitchellNeural\"},{\"language\":\"en-NZ\",\"gender\":\"Female\",\"model\":\"en-NZ-MollyNeural\"},{\"language\":\"en-NG\",\"gender\":\"Male\",\"model\":\"en-NG-AbeoNeural\"},{\"language\":\"en-NG\",\"gender\":\"Female\",\"model\":\"en-NG-EzinneNeural\"},{\"language\":\"en-PH\",\"gender\":\"Male\",\"model\":\"en-PH-JamesNeural\"},{\"language\":\"en-US\",\"gender\":\"Female\",\"model\":\"en-US-AvaNeural\"},{\"language\":\"en-US\",\"gender\":\"Male\",\"model\":\"en-US-AndrewNeural\"},{\"language\":\"en-US\",\"gender\":\"Female\",\"model\":\"en-US-EmmaNeural\"},{\"language\":\"en-US\",\"gender\":\"Male\",\"model\":\"en-US-BrianNeural\"},{\"language\":\"en-PH\",\"gender\":\"Female\",\"model\":\"en-PH-RosaNeural\"},{\"language\":\"en-SG\",\"gender\":\"Female\",\"model\":\"en-SG-LunaNeural\"},{\"language\":\"en-SG\",\"gender\":\"Male\",\"model\":\"en-SG-WayneNeural\"},{\"language\":\"en-ZA\",\"gender\":\"Female\",\"model\":\"en-ZA-LeahNeural\"},{\"language\":\"en-ZA\",\"gender\":\"Male\",\"model\":\"en-ZA-LukeNeural\"},{\"language\":\"en-TZ\",\"gender\":\"Male\",\"model\":\"en-TZ-ElimuNeural\"},{\"language\":\"en-TZ\",\"gender\":\"Female\",\"model\":\"en-TZ-ImaniNeural\"},{\"language\":\"en-GB\",\"gender\":\"Female\",\"model\":\"en-GB-LibbyNeural\"},{\"language\":\"en-GB\",\"gender\":\"Female\",\"model\":\"en-GB-MaisieNeural\"},{\"language\":\"en-GB\",\"gender\":\"Male\",\"model\":\"en-GB-RyanNeural\"},{\"language\":\"en-GB\",\"gender\":\"Female\",\"model\":\"en-GB-SoniaNeural\"},{\"language\":\"en-GB\",\"gender\":\"Male\",\"model\":\"en-GB-ThomasNeural\"},{\"language\":\"en-US\",\"gender\":\"Female\",\"model\":\"en-US-AnaNeural\"},{\"language\":\"en-US\",\"gender\":\"Female\",\"model\":\"en-US-AriaNeural\"},{\"language\":\"en-US\",\"gender\":\"Male\",\"model\":\"en-US-ChristopherNeural\"},{\"language\":\"en-US\",\"gender\":\"Male\",\"model\":\"en-US-EricNeural\"},{\"language\":\"en-US\",\"gender\":\"Male\",\"model\":\"en-US-GuyNeural\"},{\"language\":\"en-US\",\"gender\":\"Female\",\"model\":\"en-US-JennyNeural\"},{\"language\":\"en-US\",\"gender\":\"Female\",\"model\":\"en-US-MichelleNeural\"},{\"language\":\"en-US\",\"gender\":\"Male\",\"model\":\"en-US-RogerNeural\"},{\"language\":\"en-US\",\"gender\":\"Male\",\"model\":\"en-US-SteffanNeural\"},{\"language\":\"et-EE\",\"gender\":\"Female\",\"model\":\"et-EE-AnuNeural\"},{\"language\":\"et-EE\",\"gender\":\"Male\",\"model\":\"et-EE-KertNeural\"},{\"language\":\"fil-PH\",\"gender\":\"Male\",\"model\":\"fil-PH-AngeloNeural\"},{\"language\":\"fil-PH\",\"gender\":\"Female\",\"model\":\"fil-PH-BlessicaNeural\"},{\"language\":\"fi-FI\",\"gender\":\"Male\",\"model\":\"fi-FI-HarriNeural\"},{\"language\":\"fi-FI\",\"gender\":\"Female\",\"model\":\"fi-FI-NooraNeural\"},{\"language\":\"fr-BE\",\"gender\":\"Female\",\"model\":\"fr-BE-CharlineNeural\"},{\"language\":\"fr-BE\",\"gender\":\"Male\",\"model\":\"fr-BE-GerardNeural\"},{\"language\":\"fr-CA\",\"gender\":\"Male\",\"model\":\"fr-CA-ThierryNeural\"},{\"language\":\"fr-CA\",\"gender\":\"Male\",\"model\":\"fr-CA-AntoineNeural\"},{\"language\":\"fr-CA\",\"gender\":\"Male\",\"model\":\"fr-CA-JeanNeural\"},{\"language\":\"fr-CA\",\"gender\":\"Female\",\"model\":\"fr-CA-SylvieNeural\"},{\"language\":\"fr-FR\",\"gender\":\"Female\",\"model\":\"fr-FR-VivienneMultilingualNeural\"},{\"language\":\"fr-FR\",\"gender\":\"Male\",\"model\":\"fr-FR-RemyMultilingualNeural\"},{\"language\":\"fr-FR\",\"gender\":\"Female\",\"model\":\"fr-FR-DeniseNeural\"},{\"language\":\"fr-FR\",\"gender\":\"Female\",\"model\":\"fr-FR-EloiseNeural\"},{\"language\":\"fr-FR\",\"gender\":\"Male\",\"model\":\"fr-FR-HenriNeural\"},{\"language\":\"fr-CH\",\"gender\":\"Female\",\"model\":\"fr-CH-ArianeNeural\"},{\"language\":\"fr-CH\",\"gender\":\"Male\",\"model\":\"fr-CH-FabriceNeural\"},{\"language\":\"gl-ES\",\"gender\":\"Male\",\"model\":\"gl-ES-RoiNeural\"},{\"language\":\"gl-ES\",\"gender\":\"Female\",\"model\":\"gl-ES-SabelaNeural\"},{\"language\":\"ka-GE\",\"gender\":\"Female\",\"model\":\"ka-GE-EkaNeural\"},{\"language\":\"ka-GE\",\"gender\":\"Male\",\"model\":\"ka-GE-GiorgiNeural\"},{\"language\":\"de-AT\",\"gender\":\"Female\",\"model\":\"de-AT-IngridNeural\"},{\"language\":\"de-AT\",\"gender\":\"Male\",\"model\":\"de-AT-JonasNeural\"},{\"language\":\"de-DE\",\"gender\":\"Female\",\"model\":\"de-DE-SeraphinaMultilingualNeural\"},{\"language\":\"de-DE\",\"gender\":\"Male\",\"model\":\"de-DE-FlorianMultilingualNeural\"},{\"language\":\"de-DE\",\"gender\":\"Female\",\"model\":\"de-DE-AmalaNeural\"},{\"language\":\"de-DE\",\"gender\":\"Male\",\"model\":\"de-DE-ConradNeural\"},{\"language\":\"de-DE\",\"gender\":\"Female\",\"model\":\"de-DE-KatjaNeural\"},{\"language\":\"de-DE\",\"gender\":\"Male\",\"model\":\"de-DE-KillianNeural\"},{\"language\":\"de-CH\",\"gender\":\"Male\",\"model\":\"de-CH-JanNeural\"},{\"language\":\"de-CH\",\"gender\":\"Female\",\"model\":\"de-CH-LeniNeural\"},{\"language\":\"el-GR\",\"gender\":\"Female\",\"model\":\"el-GR-AthinaNeural\"},{\"language\":\"el-GR\",\"gender\":\"Male\",\"model\":\"el-GR-NestorasNeural\"},{\"language\":\"gu-IN\",\"gender\":\"Female\",\"model\":\"gu-IN-DhwaniNeural\"},{\"language\":\"gu-IN\",\"gender\":\"Male\",\"model\":\"gu-IN-NiranjanNeural\"},{\"language\":\"he-IL\",\"gender\":\"Male\",\"model\":\"he-IL-AvriNeural\"},{\"language\":\"he-IL\",\"gender\":\"Female\",\"model\":\"he-IL-HilaNeural\"},{\"language\":\"hi-IN\",\"gender\":\"Male\",\"model\":\"hi-IN-MadhurNeural\"},{\"language\":\"hi-IN\",\"gender\":\"Female\",\"model\":\"hi-IN-SwaraNeural\"},{\"language\":\"hu-HU\",\"gender\":\"Female\",\"model\":\"hu-HU-NoemiNeural\"},{\"language\":\"hu-HU\",\"gender\":\"Male\",\"model\":\"hu-HU-TamasNeural\"},{\"language\":\"is-IS\",\"gender\":\"Female\",\"model\":\"is-IS-GudrunNeural\"},{\"language\":\"is-IS\",\"gender\":\"Male\",\"model\":\"is-IS-GunnarNeural\"},{\"language\":\"id-ID\",\"gender\":\"Male\",\"model\":\"id-ID-ArdiNeural\"},{\"language\":\"id-ID\",\"gender\":\"Female\",\"model\":\"id-ID-GadisNeural\"},{\"language\":\"ga-IE\",\"gender\":\"Male\",\"model\":\"ga-IE-ColmNeural\"},{\"language\":\"ga-IE\",\"gender\":\"Female\",\"model\":\"ga-IE-OrlaNeural\"},{\"language\":\"it-IT\",\"gender\":\"Male\",\"model\":\"it-IT-GiuseppeNeural\"},{\"language\":\"it-IT\",\"gender\":\"Male\",\"model\":\"it-IT-DiegoNeural\"},{\"language\":\"it-IT\",\"gender\":\"Female\",\"model\":\"it-IT-ElsaNeural\"},{\"language\":\"it-IT\",\"gender\":\"Female\",\"model\":\"it-IT-IsabellaNeural\"},{\"language\":\"ja-JP\",\"gender\":\"Male\",\"model\":\"ja-JP-KeitaNeural\"},{\"language\":\"ja-JP\",\"gender\":\"Female\",\"model\":\"ja-JP-NanamiNeural\"},{\"language\":\"jv-ID\",\"gender\":\"Male\",\"model\":\"jv-ID-DimasNeural\"},{\"language\":\"jv-ID\",\"gender\":\"Female\",\"model\":\"jv-ID-SitiNeural\"},{\"language\":\"kn-IN\",\"gender\":\"Male\",\"model\":\"kn-IN-GaganNeural\"},{\"language\":\"kn-IN\",\"gender\":\"Female\",\"model\":\"kn-IN-SapnaNeural\"},{\"language\":\"kk-KZ\",\"gender\":\"Female\",\"model\":\"kk-KZ-AigulNeural\"},{\"language\":\"kk-KZ\",\"gender\":\"Male\",\"model\":\"kk-KZ-DauletNeural\"},{\"language\":\"km-KH\",\"gender\":\"Male\",\"model\":\"km-KH-PisethNeural\"},{\"language\":\"km-KH\",\"gender\":\"Female\",\"model\":\"km-KH-SreymomNeural\"},{\"language\":\"ko-KR\",\"gender\":\"Male\",\"model\":\"ko-KR-HyunsuNeural\"},{\"language\":\"ko-KR\",\"gender\":\"Male\",\"model\":\"ko-KR-InJoonNeural\"},{\"language\":\"ko-KR\",\"gender\":\"Female\",\"model\":\"ko-KR-SunHiNeural\"},{\"language\":\"lo-LA\",\"gender\":\"Male\",\"model\":\"lo-LA-ChanthavongNeural\"},{\"language\":\"lo-LA\",\"gender\":\"Female\",\"model\":\"lo-LA-KeomanyNeural\"},{\"language\":\"lv-LV\",\"gender\":\"Female\",\"model\":\"lv-LV-EveritaNeural\"},{\"language\":\"lv-LV\",\"gender\":\"Male\",\"model\":\"lv-LV-NilsNeural\"},{\"language\":\"lt-LT\",\"gender\":\"Male\",\"model\":\"lt-LT-LeonasNeural\"},{\"language\":\"lt-LT\",\"gender\":\"Female\",\"model\":\"lt-LT-OnaNeural\"},{\"language\":\"mk-MK\",\"gender\":\"Male\",\"model\":\"mk-MK-AleksandarNeural\"},{\"language\":\"mk-MK\",\"gender\":\"Female\",\"model\":\"mk-MK-MarijaNeural\"},{\"language\":\"ms-MY\",\"gender\":\"Male\",\"model\":\"ms-MY-OsmanNeural\"},{\"language\":\"ms-MY\",\"gender\":\"Female\",\"model\":\"ms-MY-YasminNeural\"},{\"language\":\"ml-IN\",\"gender\":\"Male\",\"model\":\"ml-IN-MidhunNeural\"},{\"language\":\"ml-IN\",\"gender\":\"Female\",\"model\":\"ml-IN-SobhanaNeural\"},{\"language\":\"mt-MT\",\"gender\":\"Female\",\"model\":\"mt-MT-GraceNeural\"},{\"language\":\"mt-MT\",\"gender\":\"Male\",\"model\":\"mt-MT-JosephNeural\"},{\"language\":\"mr-IN\",\"gender\":\"Female\",\"model\":\"mr-IN-AarohiNeural\"},{\"language\":\"mr-IN\",\"gender\":\"Male\",\"model\":\"mr-IN-ManoharNeural\"},{\"language\":\"mn-MN\",\"gender\":\"Male\",\"model\":\"mn-MN-BataaNeural\"},{\"language\":\"mn-MN\",\"gender\":\"Female\",\"model\":\"mn-MN-YesuiNeural\"},{\"language\":\"ne-NP\",\"gender\":\"Female\",\"model\":\"ne-NP-HemkalaNeural\"},{\"language\":\"ne-NP\",\"gender\":\"Male\",\"model\":\"ne-NP-SagarNeural\"},{\"language\":\"nb-NO\",\"gender\":\"Male\",\"model\":\"nb-NO-FinnNeural\"},{\"language\":\"nb-NO\",\"gender\":\"Female\",\"model\":\"nb-NO-PernilleNeural\"},{\"language\":\"ps-AF\",\"gender\":\"Male\",\"model\":\"ps-AF-GulNawazNeural\"},{\"language\":\"ps-AF\",\"gender\":\"Female\",\"model\":\"ps-AF-LatifaNeural\"},{\"language\":\"fa-IR\",\"gender\":\"Female\",\"model\":\"fa-IR-DilaraNeural\"},{\"language\":\"fa-IR\",\"gender\":\"Male\",\"model\":\"fa-IR-FaridNeural\"},{\"language\":\"pl-PL\",\"gender\":\"Male\",\"model\":\"pl-PL-MarekNeural\"},{\"language\":\"pl-PL\",\"gender\":\"Female\",\"model\":\"pl-PL-ZofiaNeural\"},{\"language\":\"pt-BR\",\"gender\":\"Female\",\"model\":\"pt-BR-ThalitaNeural\"},{\"language\":\"pt-BR\",\"gender\":\"Male\",\"model\":\"pt-BR-AntonioNeural\"},{\"language\":\"pt-BR\",\"gender\":\"Female\",\"model\":\"pt-BR-FranciscaNeural\"},{\"language\":\"pt-PT\",\"gender\":\"Male\",\"model\":\"pt-PT-DuarteNeural\"},{\"language\":\"pt-PT\",\"gender\":\"Female\",\"model\":\"pt-PT-RaquelNeural\"},{\"language\":\"ro-RO\",\"gender\":\"Female\",\"model\":\"ro-RO-AlinaNeural\"},{\"language\":\"ro-RO\",\"gender\":\"Male\",\"model\":\"ro-RO-EmilNeural\"},{\"language\":\"ru-RU\",\"gender\":\"Male\",\"model\":\"ru-RU-DmitryNeural\"},{\"language\":\"ru-RU\",\"gender\":\"Female\",\"model\":\"ru-RU-SvetlanaNeural\"},{\"language\":\"sr-RS\",\"gender\":\"Male\",\"model\":\"sr-RS-NicholasNeural\"},{\"language\":\"sr-RS\",\"gender\":\"Female\",\"model\":\"sr-RS-SophieNeural\"},{\"language\":\"si-LK\",\"gender\":\"Male\",\"model\":\"si-LK-SameeraNeural\"},{\"language\":\"si-LK\",\"gender\":\"Female\",\"model\":\"si-LK-ThiliniNeural\"},{\"language\":\"sk-SK\",\"gender\":\"Male\",\"model\":\"sk-SK-LukasNeural\"},{\"language\":\"sk-SK\",\"gender\":\"Female\",\"model\":\"sk-SK-ViktoriaNeural\"},{\"language\":\"sl-SI\",\"gender\":\"Female\",\"model\":\"sl-SI-PetraNeural\"},{\"language\":\"sl-SI\",\"gender\":\"Male\",\"model\":\"sl-SI-RokNeural\"},{\"language\":\"so-SO\",\"gender\":\"Male\",\"model\":\"so-SO-MuuseNeural\"},{\"language\":\"so-SO\",\"gender\":\"Female\",\"model\":\"so-SO-UbaxNeural\"},{\"language\":\"es-AR\",\"gender\":\"Female\",\"model\":\"es-AR-ElenaNeural\"},{\"language\":\"es-AR\",\"gender\":\"Male\",\"model\":\"es-AR-TomasNeural\"},{\"language\":\"es-BO\",\"gender\":\"Male\",\"model\":\"es-BO-MarceloNeural\"},{\"language\":\"es-BO\",\"gender\":\"Female\",\"model\":\"es-BO-SofiaNeural\"},{\"language\":\"es-CL\",\"gender\":\"Female\",\"model\":\"es-CL-CatalinaNeural\"},{\"language\":\"es-CL\",\"gender\":\"Male\",\"model\":\"es-CL-LorenzoNeural\"},{\"language\":\"es-ES\",\"gender\":\"Female\",\"model\":\"es-ES-XimenaNeural\"},{\"language\":\"es-CO\",\"gender\":\"Male\",\"model\":\"es-CO-GonzaloNeural\"},{\"language\":\"es-CO\",\"gender\":\"Female\",\"model\":\"es-CO-SalomeNeural\"},{\"language\":\"es-CR\",\"gender\":\"Male\",\"model\":\"es-CR-JuanNeural\"},{\"language\":\"es-CR\",\"gender\":\"Female\",\"model\":\"es-CR-MariaNeural\"},{\"language\":\"es-CU\",\"gender\":\"Female\",\"model\":\"es-CU-BelkysNeural\"},{\"language\":\"es-CU\",\"gender\":\"Male\",\"model\":\"es-CU-ManuelNeural\"},{\"language\":\"es-DO\",\"gender\":\"Male\",\"model\":\"es-DO-EmilioNeural\"},{\"language\":\"es-DO\",\"gender\":\"Female\",\"model\":\"es-DO-RamonaNeural\"},{\"language\":\"es-EC\",\"gender\":\"Female\",\"model\":\"es-EC-AndreaNeural\"},{\"language\":\"es-EC\",\"gender\":\"Male\",\"model\":\"es-EC-LuisNeural\"},{\"language\":\"es-SV\",\"gender\":\"Female\",\"model\":\"es-SV-LorenaNeural\"},{\"language\":\"es-SV\",\"gender\":\"Male\",\"model\":\"es-SV-RodrigoNeural\"},{\"language\":\"es-GQ\",\"gender\":\"Male\",\"model\":\"es-GQ-JavierNeural\"},{\"language\":\"es-GQ\",\"gender\":\"Female\",\"model\":\"es-GQ-TeresaNeural\"},{\"language\":\"es-GT\",\"gender\":\"Male\",\"model\":\"es-GT-AndresNeural\"},{\"language\":\"es-GT\",\"gender\":\"Female\",\"model\":\"es-GT-MartaNeural\"},{\"language\":\"es-HN\",\"gender\":\"Male\",\"model\":\"es-HN-CarlosNeural\"},{\"language\":\"es-HN\",\"gender\":\"Female\",\"model\":\"es-HN-KarlaNeural\"},{\"language\":\"es-MX\",\"gender\":\"Female\",\"model\":\"es-MX-DaliaNeural\"},{\"language\":\"es-MX\",\"gender\":\"Male\",\"model\":\"es-MX-JorgeNeural\"},{\"language\":\"es-NI\",\"gender\":\"Male\",\"model\":\"es-NI-FedericoNeural\"},{\"language\":\"es-NI\",\"gender\":\"Female\",\"model\":\"es-NI-YolandaNeural\"},{\"language\":\"es-PA\",\"gender\":\"Female\",\"model\":\"es-PA-MargaritaNeural\"},{\"language\":\"es-PA\",\"gender\":\"Male\",\"model\":\"es-PA-RobertoNeural\"},{\"language\":\"es-PY\",\"gender\":\"Male\",\"model\":\"es-PY-MarioNeural\"},{\"language\":\"es-PY\",\"gender\":\"Female\",\"model\":\"es-PY-TaniaNeural\"},{\"language\":\"es-PE\",\"gender\":\"Male\",\"model\":\"es-PE-AlexNeural\"},{\"language\":\"es-PE\",\"gender\":\"Female\",\"model\":\"es-PE-CamilaNeural\"},{\"language\":\"es-PR\",\"gender\":\"Female\",\"model\":\"es-PR-KarinaNeural\"},{\"language\":\"es-PR\",\"gender\":\"Male\",\"model\":\"es-PR-VictorNeural\"},{\"language\":\"es-ES\",\"gender\":\"Male\",\"model\":\"es-ES-AlvaroNeural\"},{\"language\":\"es-ES\",\"gender\":\"Female\",\"model\":\"es-ES-ElviraNeural\"},{\"language\":\"es-US\",\"gender\":\"Male\",\"model\":\"es-US-AlonsoNeural\"},{\"language\":\"es-US\",\"gender\":\"Female\",\"model\":\"es-US-PalomaNeural\"},{\"language\":\"es-UY\",\"gender\":\"Male\",\"model\":\"es-UY-MateoNeural\"},{\"language\":\"es-UY\",\"gender\":\"Female\",\"model\":\"es-UY-ValentinaNeural\"},{\"language\":\"es-VE\",\"gender\":\"Female\",\"model\":\"es-VE-PaolaNeural\"},{\"language\":\"es-VE\",\"gender\":\"Male\",\"model\":\"es-VE-SebastianNeural\"},{\"language\":\"su-ID\",\"gender\":\"Male\",\"model\":\"su-ID-JajangNeural\"},{\"language\":\"su-ID\",\"gender\":\"Female\",\"model\":\"su-ID-TutiNeural\"},{\"language\":\"sw-KE\",\"gender\":\"Male\",\"model\":\"sw-KE-RafikiNeural\"},{\"language\":\"sw-KE\",\"gender\":\"Female\",\"model\":\"sw-KE-ZuriNeural\"},{\"language\":\"sw-TZ\",\"gender\":\"Male\",\"model\":\"sw-TZ-DaudiNeural\"},{\"language\":\"sw-TZ\",\"gender\":\"Female\",\"model\":\"sw-TZ-RehemaNeural\"},{\"language\":\"sv-SE\",\"gender\":\"Male\",\"model\":\"sv-SE-MattiasNeural\"},{\"language\":\"sv-SE\",\"gender\":\"Female\",\"model\":\"sv-SE-SofieNeural\"},{\"language\":\"ta-IN\",\"gender\":\"Female\",\"model\":\"ta-IN-PallaviNeural\"},{\"language\":\"ta-IN\",\"gender\":\"Male\",\"model\":\"ta-IN-ValluvarNeural\"},{\"language\":\"ta-MY\",\"gender\":\"Female\",\"model\":\"ta-MY-KaniNeural\"},{\"language\":\"ta-MY\",\"gender\":\"Male\",\"model\":\"ta-MY-SuryaNeural\"},{\"language\":\"ta-SG\",\"gender\":\"Male\",\"model\":\"ta-SG-AnbuNeural\"},{\"language\":\"ta-SG\",\"gender\":\"Female\",\"model\":\"ta-SG-VenbaNeural\"},{\"language\":\"ta-LK\",\"gender\":\"Male\",\"model\":\"ta-LK-KumarNeural\"},{\"language\":\"ta-LK\",\"gender\":\"Female\",\"model\":\"ta-LK-SaranyaNeural\"},{\"language\":\"te-IN\",\"gender\":\"Male\",\"model\":\"te-IN-MohanNeural\"},{\"language\":\"te-IN\",\"gender\":\"Female\",\"model\":\"te-IN-ShrutiNeural\"},{\"language\":\"th-TH\",\"gender\":\"Male\",\"model\":\"th-TH-NiwatNeural\"},{\"language\":\"th-TH\",\"gender\":\"Female\",\"model\":\"th-TH-PremwadeeNeural\"},{\"language\":\"tr-TR\",\"gender\":\"Male\",\"model\":\"tr-TR-AhmetNeural\"},{\"language\":\"tr-TR\",\"gender\":\"Female\",\"model\":\"tr-TR-EmelNeural\"},{\"language\":\"uk-UA\",\"gender\":\"Male\",\"model\":\"uk-UA-OstapNeural\"},{\"language\":\"uk-UA\",\"gender\":\"Female\",\"model\":\"uk-UA-PolinaNeural\"},{\"language\":\"ur-IN\",\"gender\":\"Female\",\"model\":\"ur-IN-GulNeural\"},{\"language\":\"ur-IN\",\"gender\":\"Male\",\"model\":\"ur-IN-SalmanNeural\"},{\"language\":\"ur-PK\",\"gender\":\"Male\",\"model\":\"ur-PK-AsadNeural\"},{\"language\":\"ur-PK\",\"gender\":\"Female\",\"model\":\"ur-PK-UzmaNeural\"},{\"language\":\"uz-UZ\",\"gender\":\"Female\",\"model\":\"uz-UZ-MadinaNeural\"},{\"language\":\"uz-UZ\",\"gender\":\"Male\",\"model\":\"uz-UZ-SardorNeural\"},{\"language\":\"vi-VN\",\"gender\":\"Female\",\"model\":\"vi-VN-HoaiMyNeural\"},{\"language\":\"vi-VN\",\"gender\":\"Male\",\"model\":\"vi-VN-NamMinhNeural\"},{\"language\":\"cy-GB\",\"gender\":\"Male\",\"model\":\"cy-GB-AledNeural\"},{\"language\":\"cy-GB\",\"gender\":\"Female\",\"model\":\"cy-GB-NiaNeural\"},{\"language\":\"zu-ZA\",\"gender\":\"Female\",\"model\":\"zu-ZA-ThandoNeural\"},{\"language\":\"zu-ZA\",\"gender\":\"Male\",\"model\":\"zu-ZA-ThembaNeural\"}]\nexport type YANDEX_LIST = 'af'|'am'|'ar'|'az'|'ba'|'be'|'bg'|'bn'|'bs'|'ca'|'ceb'|'cs'|'cv'|'cy'|'da'|'de'|'el'|'emj'|'en'|'eo'|'es'|'et'|'eu'|'fa'|'fi'|'fr'|'ga'|'gd'|'gl'|'gu'|'he'|'hi'|'hr'|'ht'|'hu'|'hy'|'id'|'is'|'it'|'ja'|'jv'|'ka'|'kazlat'|'kk'|'km'|'kn'|'ko'|'ky'|'la'|'lb'|'lo'|'lt'|'lv'|'mg'|'mhr'|'mi'|'mk'|'ml'|'mn'|'mr'|'mrj'|'ms'|'mt'|'my'|'ne'|'nl'|'no'|'pa'|'pap'|'pl'|'pt'|'ro'|'ru'|'sah'|'si'|'sjn'|'sk'|'sl'|'sq'|'sr'|'su'|'sv'|'sw'|'ta'|'te'|'tg'|'th'|'tl'|'tr'|'tt'|'udm'|'uk'|'ur'|'uz'|'uzbcyr'|'vi'|'xh'|'yi'|'zh'|'zu'\nexport const YANDEX_LANGUAGE: TargetFilter['yandex'][] = ['af','am','ar','az','ba','be','bg','bn','bs','ca','ceb','cs','cv','cy','da','de','el','emj','en','eo','es','et','eu','fa','fi','fr','ga','gd','gl','gu','he','hi','hr','ht','hu','hy','id','is','it','ja','jv','ka','kazlat','kk','km','kn','ko','ky','la','lb','lo','lt','lv','mg','mhr','mi','mk','ml','mn','mr','mrj','ms','mt','my','ne','nl','no','pa','pap','pl','pt','ro','ru','sah','si','sjn','sk','sl','sq','sr','su','sv','sw','ta','te','tg','th','tl','tr','tt','udm','uk','ur','uz','uzbcyr','vi','xh','yi','zh','zu']\nexport const YANDEX_LANGUAGE_OBJECT: { [p in YANDEX_LIST]: string } = {\"af\":\"Afrikaans\",\"am\":\"Amharic\",\"ar\":\"Arabic\",\"az\":\"Azerbaijani\",\"ba\":\"Bashkir\",\"be\":\"Belarusian\",\"bg\":\"Bulgarian\",\"bn\":\"Bengali\",\"bs\":\"Bosnian\",\"ca\":\"Catalan\",\"ceb\":\"Cebuano\",\"cs\":\"Czech\",\"cv\":\"Chuvash\",\"cy\":\"Welsh\",\"da\":\"Danish\",\"de\":\"German\",\"el\":\"Greek\",\"emj\":\"Emoji\",\"en\":\"English\",\"eo\":\"Esperanto\",\"es\":\"Spanish\",\"et\":\"Estonian\",\"eu\":\"Basque\",\"fa\":\"Persian\",\"fi\":\"Finnish\",\"fr\":\"French\",\"ga\":\"Irish\",\"gd\":\"Scottish Gaelic\",\"gl\":\"Galician\",\"gu\":\"Gujarati\",\"he\":\"Hebrew\",\"hi\":\"Hindi\",\"hr\":\"Croatian\",\"ht\":\"Haitian\",\"hu\":\"Hungarian\",\"hy\":\"Armenian\",\"id\":\"Indonesian\",\"is\":\"Icelandic\",\"it\":\"Italian\",\"ja\":\"Japanese\",\"jv\":\"Javanese\",\"ka\":\"Georgian\",\"kazlat\":\"Kazakh (Latin)\",\"kk\":\"Kazakh\",\"km\":\"Khmer\",\"kn\":\"Kannada\",\"ko\":\"Korean\",\"ky\":\"Kyrgyz\",\"la\":\"Latin\",\"lb\":\"Luxembourgish\",\"lo\":\"Lao\",\"lt\":\"Lithuanian\",\"lv\":\"Latvian\",\"mg\":\"Malagasy\",\"mhr\":\"Mari\",\"mi\":\"Maori\",\"mk\":\"Macedonian\",\"ml\":\"Malayalam\",\"mn\":\"Mongolian\",\"mr\":\"Marathi\",\"mrj\":\"Hill Mari\",\"ms\":\"Malay\",\"mt\":\"Maltese\",\"my\":\"Burmese\",\"ne\":\"Nepali\",\"nl\":\"Dutch\",\"no\":\"Norwegian\",\"pa\":\"Punjabi\",\"pap\":\"Papiamento\",\"pl\":\"Polish\",\"pt\":\"Portuguese\",\"ro\":\"Romanian\",\"ru\":\"Russian\",\"sah\":\"Yakut\",\"si\":\"Sinhalese\",\"sjn\":\"Elvish (Sindarin)\",\"sk\":\"Slovak\",\"sl\":\"Slovenian\",\"sq\":\"Albanian\",\"sr\":\"Serbian\",\"su\":\"Sundanese\",\"sv\":\"Swedish\",\"sw\":\"Swahili\",\"ta\":\"Tamil\",\"te\":\"Telugu\",\"tg\":\"Tajik\",\"th\":\"Thai\",\"tl\":\"Tagalog\",\"tr\":\"Turkish\",\"tt\":\"Tatar\",\"udm\":\"Udmurt\",\"uk\":\"Ukrainian\",\"ur\":\"Urdu\",\"uz\":\"Uzbek\",\"uzbcyr\":\"Uzbek (Cyrillic)\",\"vi\":\"Vietnamese\",\"xh\":\"Xhosa\",\"yi\":\"Yiddish\",\"zh\":\"Chinese\",\"zu\":\"Zulu\"}\nexport type DEEPL_LIST = 'ar'|'bg'|'cs'|'da'|'de'|'el'|'en'|'en-gb'|'en-us'|'es'|'et'|'fi'|'fr'|'ga'|'hr'|'hu'|'id'|'is'|'it'|'ja'|'ko'|'lt'|'lv'|'mt'|'nb'|'nl'|'no'|'pl'|'pt'|'pt-br'|'pt-pt'|'ro'|'ru'|'sk'|'sl'|'sv'|'tr'|'uk'|'zh'\nexport const DEEPL_LANGUAGE: TargetFilter['deepl'][] = ['ar','bg','cs','da','de','el','en','en-gb','en-us','es','et','fi','fr','ga','hr','hu','id','is','it','ja','ko','lt','lv','mt','nb','nl','no','pl','pt','pt-br','pt-pt','ro','ru','sk','sl','sv','tr','uk','zh']\nexport const DEEPL_LANGUAGE_OBJECT: { [p in DEEPL_LIST]: string } = {\"ar\":\"Arabic\",\"bg\":\"Bulgarian\",\"cs\":\"Czech\",\"da\":\"Danish\",\"de\":\"German\",\"el\":\"Greek\",\"en\":\"English\",\"en-gb\":\"English (British)\",\"en-us\":\"English (American)\",\"es\":\"Spanish\",\"et\":\"Estonian\",\"fi\":\"Finnish\",\"fr\":\"French\",\"ga\":\"Irish\",\"hr\":\"Croatian\",\"hu\":\"Hungarian\",\"id\":\"Indonesian\",\"is\":\"Icelandic\",\"it\":\"Italian\",\"ja\":\"Japanese\",\"ko\":\"Korean\",\"lt\":\"Lithuanian\",\"lv\":\"Latvian\",\"mt\":\"Maltese\",\"nb\":\"Norwegian (bokm√•l)\",\"nl\":\"Dutch\",\"no\":\"Norwegian\",\"pl\":\"Polish\",\"pt\":\"Portuguese\",\"pt-br\":\"Portuguese (Brazilian)\",\"pt-pt\":\"Portuguese\",\"ro\":\"Romanian\",\"ru\":\"Russian\",\"sk\":\"Slovak\",\"sl\":\"Slovenian\",\"sv\":\"Swedish\",\"tr\":\"Turkish\",\"uk\":\"Ukrainian\",\"zh\":\"Chinese (simplified)\"}\nexport type BAIDU_LIST = 'ach'|'afr'|'aka'|'alb'|'amh'|'ara'|'arg'|'arm'|'arq'|'asm'|'ast'|'aym'|'aze'|'bak'|'bal'|'baq'|'bel'|'bem'|'ben'|'ber'|'bho'|'bis'|'bli'|'bos'|'bre'|'bul'|'bur'|'cat'|'ceb'|'chr'|'cht'|'chv'|'cor'|'cos'|'cre'|'cri'|'cs'|'dan'|'de'|'div'|'el'|'en'|'eno'|'epo'|'est'|'fao'|'fil'|'fin'|'fra'|'fri'|'frm'|'frn'|'fry'|'ful'|'geo'|'gla'|'gle'|'glg'|'glv'|'gra'|'grn'|'guj'|'hak'|'hau'|'haw'|'heb'|'hi'|'hil'|'hkm'|'hmn'|'hrv'|'ht'|'hu'|'hup'|'ibo'|'ice'|'id'|'ido'|'iku'|'ina'|'ing'|'it'|'jav'|'jp'|'kab'|'kah'|'kal'|'kan'|'kas'|'kau'|'kin'|'kir'|'kli'|'kok'|'kon'|'kor'|'kur'|'lag'|'lao'|'lat'|'lav'|'lim'|'lin'|'lit'|'log'|'loj'|'los'|'ltz'|'lug'|'mac'|'mah'|'mai'|'mal'|'mao'|'mar'|'mau'|'may'|'mg'|'mlt'|'mot'|'nbl'|'nea'|'nep'|'nl'|'nno'|'nob'|'nor'|'nqo'|'nya'|'oci'|'oji'|'ori'|'orm'|'oss'|'pam'|'pan'|'pap'|'ped'|'per'|'pl'|'pot'|'pt'|'pus'|'que'|'ro'|'roh'|'rom'|'ru'|'ruy'|'san'|'sco'|'sec'|'sha'|'sil'|'sin'|'sk'|'slo'|'sm'|'sme'|'sna'|'snd'|'sol'|'som'|'sot'|'spa'|'src'|'srd'|'srp'|'sun'|'swa'|'swe'|'syr'|'tam'|'tat'|'tel'|'tet'|'tgk'|'tgl'|'th'|'tir'|'tr'|'tso'|'tua'|'tuk'|'twi'|'ukr'|'ups'|'urd'|'ven'|'vie'|'wel'|'wln'|'wol'|'wyw'|'xho'|'yid'|'yor'|'yue'|'zaz'|'zh'|'zul'\nexport const BAIDU_LANGUAGE: TargetFilter['baidu'][] = ['ach','afr','aka','alb','amh','ara','arg','arm','arq','asm','ast','aym','aze','bak','bal','baq','bel','bem','ben','ber','bho','bis','bli','bos','bre','bul','bur','cat','ceb','chr','cht','chv','cor','cos','cre','cri','cs','dan','de','div','el','en','eno','epo','est','fao','fil','fin','fra','fri','frm','frn','fry','ful','geo','gla','gle','glg','glv','gra','grn','guj','hak','hau','haw','heb','hi','hil','hkm','hmn','hrv','ht','hu','hup','ibo','ice','id','ido','iku','ina','ing','it','jav','jp','kab','kah','kal','kan','kas','kau','kin','kir','kli','kok','kon','kor','kur','lag','lao','lat','lav','lim','lin','lit','log','loj','los','ltz','lug','mac','mah','mai','mal','mao','mar','mau','may','mg','mlt','mot','nbl','nea','nep','nl','nno','nob','nor','nqo','nya','oci','oji','ori','orm','oss','pam','pan','pap','ped','per','pl','pot','pt','pus','que','ro','roh','rom','ru','ruy','san','sco','sec','sha','sil','sin','sk','slo','sm','sme','sna','snd','sol','som','sot','spa','src','srd','srp','sun','swa','swe','syr','tam','tat','tel','tet','tgk','tgl','th','tir','tr','tso','tua','tuk','twi','ukr','ups','urd','ven','vie','wel','wln','wol','wyw','xho','yid','yor','yue','zaz','zh','zul']\nexport const BAIDU_LANGUAGE_OBJECT: { [p in BAIDU_LIST]: string } = {\"ach\":\"‰∫öÈΩêËØ≠\",\"afr\":\"ÂçóÈùûËç∑ÂÖ∞ËØ≠\",\"aka\":\"ÈòøËÇØËØ≠\",\"alb\":\"ÈòøÂ∞îÂ∑¥Â∞º‰∫öËØ≠\",\"amh\":\"ÈòøÂßÜÂìàÊãâËØ≠\",\"ara\":\"ÈòøÊãâ‰ºØËØ≠\",\"arg\":\"ÈòøÊãâË¥°ËØ≠\",\"arm\":\"‰∫öÁæéÂ∞º‰∫öËØ≠\",\"arq\":\"ÈòøÂ∞îÂèäÂà©‰∫öÈòøÊãâ‰ºØËØ≠\",\"asm\":\"ÈòøËê®ÂßÜËØ≠\",\"ast\":\"ÈòøÊñØÂõæÈáå‰∫öÊñØËØ≠\",\"aym\":\"ËâæÈ©¨ÊãâËØ≠\",\"aze\":\"ÈòøÂ°ûÊãúÁñÜËØ≠\",\"bak\":\"Â∑¥‰ªÄÂü∫Â∞îËØ≠\",\"bal\":\"‰øæË∑ØÊîØËØ≠\",\"baq\":\"Â∑¥ÊñØÂÖãËØ≠\",\"bel\":\"ÁôΩ‰øÑÁΩóÊñØËØ≠\",\"bem\":\"Êú¨Â∑¥ËØ≠\",\"ben\":\"Â≠üÂä†ÊãâËØ≠\",\"ber\":\"ÊüèÊüèÂ∞îËØ≠\",\"bho\":\"ÂçöÊù∞ÊôÆÂ∞îËØ≠\",\"bis\":\"ÊØîÊñØÊãâÈ©¨ËØ≠\",\"bli\":\"ÊØîÊûóËØ≠\",\"bos\":\"Ê≥¢ÊñØÂ∞º‰∫öËØ≠\",\"bre\":\"Â∏ÉÂàóÂ°îÂ∞ºËØ≠\",\"bul\":\"‰øùÂä†Âà©‰∫öËØ≠\",\"bur\":\"ÁºÖÁî∏ËØ≠\",\"cat\":\"Âä†Ê≥∞ÁΩóÂ∞º‰∫öËØ≠\",\"ceb\":\"ÂÆøÂä°ËØ≠\",\"chr\":\"ÂàáÁΩóÂü∫ËØ≠\",\"cht\":\"‰∏≠Êñá(ÁπÅ‰Ωì)\",\"chv\":\"Ê•öÁì¶‰ªÄËØ≠\",\"cor\":\"Â∫∑Áì¶Â∞îËØ≠\",\"cos\":\"ÁßëË•øÂòâËØ≠\",\"cre\":\"ÂÖãÈáåÂÖãËØ≠\",\"cri\":\"ÂÖãÈáåÁ±≥‰∫öÈûëÈùºËØ≠\",\"cs\":\"Êç∑ÂÖãËØ≠\",\"dan\":\"‰∏πÈ∫¶ËØ≠\",\"de\":\"Âæ∑ËØ≠\",\"div\":\"Ëø™Áª¥Â∏åËØ≠\",\"el\":\"Â∏åËÖäËØ≠\",\"en\":\"Ëã±ËØ≠\",\"eno\":\"Âè§Ëã±ËØ≠\",\"epo\":\"‰∏ñÁïåËØ≠\",\"est\":\"Áà±Ê≤ôÂ∞º‰∫öËØ≠\",\"fao\":\"Ê≥ïÁΩóËØ≠\",\"fil\":\"Ëè≤ÂæãÂÆæËØ≠\",\"fin\":\"Ëä¨ÂÖ∞ËØ≠\",\"fra\":\"Ê≥ïËØ≠\",\"fri\":\"ÂºóÁïôÂà©ËØ≠\",\"frm\":\"‰∏≠Âè§Ê≥ïËØ≠\",\"frn\":\"Âä†ÊãøÂ§ßÊ≥ïËØ≠\",\"fry\":\"Ë•øÂºóÈáåÊñØËØ≠\",\"ful\":\"ÂØåÊãâÂ∞ºËØ≠\",\"geo\":\"Ê†ºÈ≤ÅÂêâ‰∫öËØ≠\",\"gla\":\"ÁõñÂ∞îËØ≠\",\"gle\":\"Áà±Â∞îÂÖ∞ËØ≠\",\"glg\":\"Âä†Âà©Ë•ø‰∫öËØ≠\",\"glv\":\"ÊõºÂÖãÊñØËØ≠\",\"gra\":\"Âè§Â∏åËÖäËØ≠\",\"grn\":\"ÁìúÊãâÂ∞ºËØ≠\",\"guj\":\"Âè§ÂêâÊãâÁâπËØ≠\",\"hak\":\"ÂìàÂç°Èí¶ËØ≠\",\"hau\":\"Ë±™Ëê®ËØ≠\",\"haw\":\"Â§èÂ®ÅÂ§∑ËØ≠\",\"heb\":\"Â∏å‰ºØÊù•ËØ≠\",\"hi\":\"Âç∞Âú∞ËØ≠\",\"hil\":\"Â∏åÂà©ÁõñÂÜúËØ≠\",\"hkm\":\"È´òÊ£âËØ≠\",\"hmn\":\"ËãóËØ≠\",\"hrv\":\"ÂÖãÁΩóÂú∞‰∫öËØ≠\",\"ht\":\"Êµ∑Âú∞ËØ≠\",\"hu\":\"ÂåàÁâôÂà©ËØ≠\",\"hup\":\"ËÉ°Â∏ïËØ≠\",\"ibo\":\"‰ºäÂçöËØ≠\",\"ice\":\"ÂÜ∞Â≤õËØ≠\",\"id\":\"Âç∞Â∞ºËØ≠\",\"ido\":\"‰ºäÂ§öËØ≠\",\"iku\":\"‰ºäÂä™ÂÖãÊèêÂõæÁâπËØ≠\",\"ina\":\"Âõ†ÁâπËØ≠\",\"ing\":\"Âç∞Âè§‰ªÄËØ≠\",\"it\":\"ÊÑèÂ§ßÂà©ËØ≠\",\"jav\":\"Áà™ÂìáËØ≠\",\"jp\":\"Êó•ËØ≠\",\"kab\":\"Âç°ÊãúÂ∞îËØ≠\",\"kah\":\"Âç°ËàíÊØîËØ≠\",\"kal\":\"Ê†ºÈôµÂÖ∞ËØ≠\",\"kan\":\"Âç°Á∫≥ËææËØ≠\",\"kas\":\"ÂÖã‰ªÄÁ±≥Â∞îËØ≠\",\"kau\":\"Âç°Âä™ÈáåËØ≠\",\"kin\":\"Âç¢Êó∫ËææËØ≠\",\"kir\":\"ÂêâÂ∞îÂêâÊñØËØ≠\",\"kli\":\"ÂÖãÊûóË¥°ËØ≠\",\"kok\":\"Â≠îÂç°Â∞ºËØ≠\",\"kon\":\"ÂàöÊûúËØ≠\",\"kor\":\"Èü©ËØ≠\",\"kur\":\"Â∫ìÂ∞îÂæ∑ËØ≠\",\"lag\":\"ÊãâÁâπÂä†Ëé±ËØ≠\",\"lao\":\"ËÄÅÊåùËØ≠\",\"lat\":\"Êãâ‰∏ÅËØ≠\",\"lav\":\"ÊãâËÑ±Áª¥‰∫öËØ≠\",\"lim\":\"ÊûóÂ†°ËØ≠\",\"lin\":\"ÊûóÂä†ÊãâËØ≠\",\"lit\":\"Á´ãÈô∂ÂÆõËØ≠\",\"log\":\"‰ΩéÂú∞Âæ∑ËØ≠\",\"loj\":\"ÈÄªËæëËØ≠\",\"los\":\"‰∏ãÁ¥¢Â∏ÉËØ≠\",\"ltz\":\"Âç¢Ê£ÆÂ†°ËØ≠\",\"lug\":\"Âç¢Âπ≤ËææËØ≠\",\"mac\":\"È©¨ÂÖ∂È°øËØ≠\",\"mah\":\"È©¨ÁªçÂ∞îËØ≠\",\"mai\":\"ËøàËíÇÂà©ËØ≠\",\"mal\":\"È©¨ÊãâÈõÖÊãâÂßÜËØ≠\",\"mao\":\"ÊØõÂà©ËØ≠\",\"mar\":\"È©¨ÊãâÂú∞ËØ≠\",\"mau\":\"ÊØõÈáåÊ±ÇÊñØÂÖãÈáåÂ••Â∞îËØ≠\",\"may\":\"È©¨Êù•ËØ≠\",\"mg\":\"È©¨ÊãâÂä†ÊñØËØ≠\",\"mlt\":\"È©¨ËÄ≥‰ªñËØ≠\",\"mot\":\"ÈªëÂ±±ËØ≠\",\"nbl\":\"ÂçóÊÅ©Âæ∑Ë¥ùËé±ËØ≠\",\"nea\":\"ÈÇ£‰∏çÂãíÊñØËØ≠\",\"nep\":\"Â∞ºÊ≥äÂ∞îËØ≠\",\"nl\":\"Ëç∑ÂÖ∞ËØ≠\",\"nno\":\"Êñ∞Êå™Â®ÅËØ≠\",\"nob\":\"‰π¶Èù¢Êå™Â®ÅËØ≠\",\"nor\":\"Êå™Â®ÅËØ≠\",\"nqo\":\"Ë•øÈùû‰π¶Èù¢ËØ≠\",\"nya\":\"ÈΩêÂàáÁì¶ËØ≠\",\"oci\":\"Â••ÂÖãËØ≠\",\"oji\":\"Â••Êù∞Â∏ÉÁì¶ËØ≠\",\"ori\":\"Â••Èáå‰∫öËØ≠\",\"orm\":\"Â••ÁΩóËé´ËØ≠\",\"oss\":\"Â••Â°ûÊ¢ØËØ≠\",\"pam\":\"ÈÇ¶ÊùøÁâôËØ≠\",\"pan\":\"ÊóÅÈÅÆÊôÆËØ≠\",\"pap\":\"Â∏ïÁöÆÈòøÈó®ÊâòËØ≠\",\"ped\":\"ÂåóÁ¥¢ÊâòËØ≠\",\"per\":\"Ê≥¢ÊñØËØ≠\",\"pl\":\"Ê≥¢ÂÖ∞ËØ≠\",\"pot\":\"Â∑¥Ë•øËë°ËêÑÁâôËØ≠\",\"pt\":\"Ëë°ËêÑÁâôËØ≠\",\"pus\":\"ÊôÆ‰ªÄÂõæËØ≠\",\"que\":\"ÂÖã‰∏ò‰∫öËØ≠\",\"ro\":\"ÁΩóÂßÜËØ≠\",\"roh\":\"ÁΩóÊõº‰ªÄËØ≠\",\"rom\":\"ÁΩóÈ©¨Â∞º‰∫öËØ≠\",\"ru\":\"‰øÑËØ≠\",\"ruy\":\"Âç¢Ê£ÆÂ∞º‰∫öËØ≠\",\"san\":\"Ê¢µËØ≠\",\"sco\":\"ËãèÊ†ºÂÖ∞ËØ≠\",\"sec\":\"Â°ûÂ∞îÁª¥‰∫ö-ÂÖãÁΩóÂú∞‰∫öËØ≠\",\"sha\":\"Êé∏ËØ≠\",\"sil\":\"Ë•øÈáåË•ø‰∫öËØ≠\",\"sin\":\"ÂÉß‰ºΩÁΩóËØ≠ \",\"sk\":\"ÊñØÊ¥õ‰ºêÂÖãËØ≠\",\"slo\":\"ÊñØÊ¥õÊñáÂ∞º‰∫öËØ≠\",\"sm\":\"Ëê®Êë©‰∫öËØ≠\",\"sme\":\"ÂåóÊñπËê®Á±≥ËØ≠\",\"sna\":\"‰øÆÁ∫≥ËØ≠\",\"snd\":\"‰ø°Âæ∑ËØ≠\",\"sol\":\"Ê°ëÊµ∑ËØ≠\",\"som\":\"Á¥¢È©¨ÈáåËØ≠\",\"sot\":\"ÂçóÁ¥¢ÊâòËØ≠\",\"spa\":\"Ë•øÁè≠ÁâôËØ≠\",\"src\":\"Â°ûÂ∞îÁª¥‰∫öËØ≠(Ë•øÈáåÂ∞îÊñá)\",\"srd\":\"Ëê®‰∏ÅÂ∞º‰∫öËØ≠\",\"srp\":\"Â°ûÂ∞îÁª¥‰∫öËØ≠(Êãâ‰∏ÅÊñá)\",\"sun\":\"Â∑Ω‰ªñËØ≠\",\"swa\":\"ÊñØÁì¶Â∏åÈáåËØ≠\",\"swe\":\"ÁëûÂÖ∏ËØ≠\",\"syr\":\"ÂèôÂà©‰∫öËØ≠\",\"tam\":\"Ê≥∞Á±≥Â∞îËØ≠\",\"tat\":\"ÈûëÈùºËØ≠\",\"tel\":\"Ê≥∞Âç¢Âõ∫ËØ≠\",\"tet\":\"Âæ∑È°øËØ≠\",\"tgk\":\"Â°îÂêâÂÖãËØ≠\",\"tgl\":\"‰ªñÂä†Á¶ÑËØ≠\",\"th\":\"Ê≥∞ËØ≠\",\"tir\":\"ÊèêÊ†ºÂà©Â∞º‰∫öËØ≠\",\"tr\":\"ÂúüËÄ≥ÂÖ∂ËØ≠\",\"tso\":\"ËÅ™Âä†ËØ≠\",\"tua\":\"Á™ÅÂ∞ºÊñØÈòøÊãâ‰ºØËØ≠\",\"tuk\":\"ÂúüÂ∫ìÊõºËØ≠\",\"twi\":\"Â•ëÁª¥ËØ≠\",\"ukr\":\"‰πåÂÖãÂÖ∞ËØ≠\",\"ups\":\"È´òÂú∞Á¥¢Â∏ÉËØ≠\",\"urd\":\"‰πåÂ∞îÈÉΩËØ≠\",\"ven\":\"ÊñáËææËØ≠\",\"vie\":\"Ë∂äÂçóËØ≠\",\"wel\":\"Â®ÅÂ∞îÂ£´ËØ≠\",\"wln\":\"Áì¶ÈöÜËØ≠\",\"wol\":\"Ê≤ÉÊ¥õÂ§´ËØ≠\",\"wyw\":\"‰∏≠Êñá(ÊñáË®ÄÊñá)\",\"xho\":\"ÁßëËê®ËØ≠\",\"yid\":\"ÊÑèÁ¨¨Áª™ËØ≠\",\"yor\":\"Á∫¶È≤ÅÂ∑¥ËØ≠\",\"yue\":\"‰∏≠Êñá(Á≤§ËØ≠)\",\"zaz\":\"ÊâéÊâéÂÖ∂ËØ≠\",\"zh\":\"‰∏≠Êñá(ÁÆÄ‰Ωì)\",\"zul\":\"Á•ñÈ≤ÅËØ≠\"}\nexport type BAIDU_TTS_LIST = 'en'|'zh'|'yue'|'ara'|'kor'|'jp'|'th'|'pt'|'spa'|'fra'|'ru'|'de'|'uk'\nexport type SOGOU_LIST = 'ar'|'pl'|'da'|'de'|'ru'|'fr'|'fi'|'ko'|'nl'|'cs'|'pt'|'ja'|'sv'|'th'|'tr'|'es'|'hu'|'en'|'it'|'vi'|'zh-CHS'\nexport const SOGOU_LANGUAGE: TargetFilter['sogou'][] = ['ar','pl','da','de','ru','fr','fi','ko','nl','cs','pt','ja','sv','th','tr','es','hu','en','it','vi','zh-CHS']\nexport const SOGOU_LANGUAGE_OBJECT: { [p in SOGOU_LIST]: string } = {\"ar\":\"ÈòøÊãâ‰ºØËØ≠\",\"pl\":\"Ê≥¢ÂÖ∞ËØ≠\",\"da\":\"‰∏πÈ∫¶ËØ≠\",\"de\":\"Âæ∑ËØ≠\",\"ru\":\"‰øÑËØ≠\",\"fr\":\"Ê≥ïËØ≠\",\"fi\":\"Ëä¨ÂÖ∞ËØ≠\",\"ko\":\"Èü©ËØ≠\",\"nl\":\"Ëç∑ÂÖ∞ËØ≠\",\"cs\":\"Êç∑ÂÖãËØ≠\",\"pt\":\"Ëë°ËêÑÁâôËØ≠\",\"ja\":\"Êó•ËØ≠\",\"sv\":\"ÁëûÂÖ∏ËØ≠\",\"th\":\"Ê≥∞ËØ≠\",\"tr\":\"ÂúüËÄ≥ÂÖ∂ËØ≠\",\"es\":\"Ë•øÁè≠ÁâôËØ≠\",\"hu\":\"ÂåàÁâôÂà©ËØ≠\",\"en\":\"Ëã±ËØ≠\",\"it\":\"ÊÑèÂ§ßÂà©ËØ≠\",\"vi\":\"Ë∂äÂçóËØ≠\",\"zh-CHS\":\"‰∏≠Êñá\"}\nexport type SOGOU_TTS_LIST = Exclude<SOGOU_LIST, 'tr'>\nexport type WATSON_LIST = 'ar'|'bg'|'bn'|'bs'|'ca'|'cnr'|'cs'|'cy'|'da'|'de'|'el'|'en'|'es'|'et'|'eu'|'fi'|'fr'|'fr-CA'|'ga'|'gu'|'he'|'hi'|'hr'|'hu'|'id'|'it'|'ja'|'kn'|'ko'|'lt'|'lv'|'ml'|'mr'|'ms'|'mt'|'nb'|'ne'|'nl'|'pa'|'pl'|'pt'|'ro'|'ru'|'si'|'sk'|'sl'|'sr'|'sv'|'ta'|'te'|'th'|'tr'|'uk'|'ur'|'vi'|'zh'|'zh-TW'\nexport const WATSON_LANGUAGE: TargetFilter['watson'][] = ['ar','bg','bn','bs','ca','cnr','cs','cy','da','de','el','en','es','et','eu','fi','fr','fr-CA','ga','gu','he','hi','hr','hu','id','it','ja','kn','ko','lt','lv','ml','mr','ms','mt','nb','ne','nl','pa','pl','pt','ro','ru','si','sk','sl','sr','sv','ta','te','th','tr','uk','ur','vi','zh','zh-TW']\nexport const WATSON_LANGUAGE_OBJECT: { [p in WATSON_LIST]: string } = {\"ar\":\"Arabic\",\"bg\":\"Bulgarian\",\"bn\":\"Bengali\",\"bs\":\"Bosnian\",\"ca\":\"Catalan\",\"cnr\":\"Montenegrin\",\"cs\":\"Czech\",\"cy\":\"Welsh\",\"da\":\"Danish\",\"de\":\"German\",\"el\":\"Greek\",\"en\":\"English\",\"es\":\"Spanish\",\"et\":\"Estonian\",\"eu\":\"Basque\",\"fi\":\"Finnish\",\"fr\":\"French\",\"fr-CA\":\"French (Canada)\",\"ga\":\"Irish\",\"gu\":\"Gujarati\",\"he\":\"Hebrew\",\"hi\":\"Hindi\",\"hr\":\"Croatian\",\"hu\":\"Hungarian\",\"id\":\"Indonesian\",\"it\":\"Italian\",\"ja\":\"Japanese\",\"kn\":\"Kannada\",\"ko\":\"Korean\",\"lt\":\"Lithuanian\",\"lv\":\"Latvian\",\"ml\":\"Malayalam\",\"mr\":\"Marathi\",\"ms\":\"Malay\",\"mt\":\"Maltese\",\"nb\":\"Norwegian Bokmal\",\"ne\":\"Nepali\",\"nl\":\"Dutch\",\"pa\":\"Punjabi\",\"pl\":\"Polish\",\"pt\":\"Portuguese\",\"ro\":\"Romanian\",\"ru\":\"Russian\",\"si\":\"Sinhala\",\"sk\":\"Slovakian\",\"sl\":\"Slovenian\",\"sr\":\"Serbian\",\"sv\":\"Swedish\",\"ta\":\"Tamil\",\"te\":\"Telugu\",\"th\":\"Thai\",\"tr\":\"Turkish\",\"uk\":\"Ukrainian\",\"ur\":\"Urdu\",\"vi\":\"Vietnamese\",\"zh\":\"Simplified Chinese\",\"zh-TW\":\"Traditional Chinese\"}\n","import type { TranslatorModuleFunction } from '../types.js'\nimport { SupportedLanguage, generateUUID } from '../misc.js'\nimport axiosFetch from 'translator-utils-axios-helper'\nimport { YANDEX_LANGUAGE } from '../language.js'\n\n//from yandex browser\nconst generateSid = () => generateUUID().replaceAll('-', '')\n\nconst YandexDetect = async (text: string | string[] = ''): Promise<string | '_'> => {\n    if (!text) {\n        return '_'\n    }\n    if (Array.isArray(text)) {\n        text = text.join('\\n')\n    }\n    try {\n        const languageResult = await axiosFetch.get(\n            'https://translate.yandex.net/api/v1/tr.json/detect?' +\n                new URLSearchParams({\n                    sid: generateSid(),\n                    srv: 'android', // or 'ios'\n                    text\n                    //hint: 'en,zh'\n                }).toString()\n        )\n        if (languageResult.data?.code === 200 && languageResult.data?.lang) {\n            return languageResult.data?.lang || '_'\n        } else {\n            return '_'\n        }\n    } catch (e) {\n        return '_'\n    }\n}\n\nconst YandexTranslator: TranslatorModuleFunction<'yandex'> = async (text: string | string[] = '', source = 'auto', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #YandexTranslator ')\n    }\n    if (!SupportedLanguage(YANDEX_LANGUAGE, target || 'en') || (source !== 'auto' && !SupportedLanguage(YANDEX_LANGUAGE, source || 'en'))) {\n        return Promise.reject('Unsupported target language #YandexTranslator ')\n    }\n\n    const lang = source === 'auto' ? await YandexDetect(Array.isArray(text) ? text.join(' ') : text) : source\n\n    if (lang === '_') {\n        return Promise.reject('Unsupported source language #YandexTranslator ')\n    }\n\n    return new Promise(async (resolve, reject) => {\n        axiosFetch\n            .post(\n                'https://translate.yandex.net/api/v1/tr.json/translate?' +\n                    new URLSearchParams({\n                        id: `${generateSid()}-0-0`,\n                        srv: 'android' // ios\n                    }).toString(),\n                new URLSearchParams({\n                    source_lang: lang,\n                    target_lang: target,\n                    text: Array.isArray(text) ? text.join('\\n') : text\n                }).toString()\n            )\n            .then((response) => {\n                if (response?.data?.text && response?.data?.text instanceof Array) {\n                    resolve(raw ? response.data : response.data.text.join('\\n'))\n                }\n                reject(raw ? response.data : 'Invalid content #YandexTranslator ')\n            })\n            .catch((e) => {\n                reject(raw ? e : e.toString())\n            })\n    })\n}\n\nconst YandexBrowserTranslator: TranslatorModuleFunction<'yandex_browser'> = async (text: string | string[] = '', source = 'auto', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #YandexTranslator ')\n    }\n    if (!SupportedLanguage(YANDEX_LANGUAGE, target || 'en') || (source !== 'auto' && !SupportedLanguage(YANDEX_LANGUAGE, source || 'en'))) {\n        return Promise.reject('Unsupported target language #YandexTranslator ')\n    }\n\n    const lang = source === 'auto' ? await YandexDetect((Array.isArray(text) ? text.join(' ') : text).replaceAll(/<a id=\\d><><\\/a>/gm, '')) : source\n\n    if (lang === '_') {\n        return Promise.reject('Unsupported source language #YandexTranslator ')\n    }\n\n    let query = new URLSearchParams({\n        translateMode: 'context',\n        context_title: 'Twitter Monitor Translator',\n        id: `${generateSid()}-0-0`,\n        srv: 'yabrowser',\n        lang: `${lang}-${target}`,\n        format: 'html',\n        options: '2'\n    })\n    return new Promise(async (resolve, reject) => {\n        axiosFetch\n            .get('https://browser.translate.yandex.net/api/v1/tr.json/translate?' + query.toString() + '&text=' + (text instanceof Array ? text.map((x) => encodeURIComponent(x)).join('&text=') : encodeURIComponent(text)))\n            .then((response) => {\n                if (response?.data?.text && response?.data?.text instanceof Array) {\n                    resolve(raw ? response.data : response.data.text.join('\\n'))\n                }\n                reject(raw ? response.data : 'Invalid content #YandexTranslator ')\n            })\n            .catch((e) => {\n                reject(raw ? e : e.toString())\n            })\n    })\n}\n\n// yandex tts use websocket...\n\nexport { YandexDetect, YandexTranslator, YandexBrowserTranslator }\n","import type { TTSModuleFunction, TranslatorModuleFunction } from '../types.js'\nimport { SupportedLanguage } from '../misc.js'\nimport axiosFetch from 'translator-utils-axios-helper'\nimport { GOOGLE_LANGUAGE } from '../language.js'\n\nconst GoogleTranslate: TranslatorModuleFunction<'google'> = async (text = '', source = 'auto', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #GoogleTranslate ')\n    }\n    if (!SupportedLanguage(GOOGLE_LANGUAGE, target || 'en') || (source !== 'auto' && !SupportedLanguage(GOOGLE_LANGUAGE, source || 'en'))) {\n        return Promise.reject('Unsupported target language #GoogleTranslate ')\n    }\n\n    if (Array.isArray(text)) {\n        text = text.join('\\n')\n    }\n    // thanks https://codeberg.org/aryak/libmozhi/src/branch/master/engines.go#L52\n    if (!ext.legacy === false) {\n        return new Promise(async (resolve, reject) => {\n            axiosFetch\n                .post(\n                    'https://translate.google.com/_/TranslateWebserverUi/data/batchexecute',\n                    new URLSearchParams({\n                        'f.req': JSON.stringify([[['MkEWBc', JSON.stringify([[text, source, target, 1], []]), null, 'generic']]])\n                    }).toString()\n                )\n                .then((response) => {\n                    if (raw && !ext.raw_json) {\n                        resolve(response.data)\n                    }\n\n                    // try to parse content\n                    const splitedResponse = response.data.split('\\n')\n                    let tmpData = ''\n                    for (let index in splitedResponse) {\n                        const i = Number(index)\n                        if (!isNaN(splitedResponse[i]) && i < splitedResponse.length - 1 && splitedResponse[i + 1].startsWith('[')) {\n                            tmpData = splitedResponse[i + 1]\n                            break\n                        }\n                    }\n                    resolve(raw && ext.raw_json ? JSON.parse(tmpData) : (JSON.parse(JSON.parse(tmpData)[0][2])[1][0][0][5] || []).map((content: any[]) => content[0]).join(''))\n                })\n                .catch((e) => {\n                    console.log(e)\n                    reject(raw ? e : e.toString())\n                })\n        })\n    } else {\n        const query = new URLSearchParams({\n            client: 'webapp',\n            sl: source,\n            tl: target || 'en',\n            hl: target || 'en',\n            dt: 't',\n            clearbtn: '1',\n            otf: '1',\n            pc: '1',\n            ssel: '0',\n            tsel: '0',\n            kc: '2',\n            tk: '',\n            q: text\n        })\n        return new Promise(async (resolve, reject) => {\n            axiosFetch\n                .get('https://translate.google.com/translate_a/single?' + 'dt=at&dt=bd&dt=ex&dt=md&dt=rw&dt=ss&dt=rm&' + query.toString(), {\n                    headers: {\n                        referer: 'https://translate.google.com/',\n                        authority: 'translate.google.com'\n                    }\n                })\n                .then((response) => {\n                    if (response.data && Array.isArray(response.data[0])) {\n                        resolve(\n                            raw\n                                ? response.data\n                                : response.data[0]\n                                      .filter((translate) => translate)\n                                      .map((translate) => translate[0])\n                                      .join('')\n                        )\n                        //resolve(response.data[0].filter(translate => translate).map(translate => translate[0]).join(''))\n                    }\n                    reject(raw ? response.data : 'Invalid content #GoogleTranslate ')\n                })\n                .catch((e) => {\n                    reject(raw ? e : e.toString())\n                })\n        })\n    }\n}\n\nconst GoogleBrowserTranslate: TranslatorModuleFunction<'google_browser'> = async (text = '', source = 'auto', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #GoogleTranslate ')\n    }\n    if (!SupportedLanguage(GOOGLE_LANGUAGE, target || 'en') || (source !== 'auto' && !SupportedLanguage(GOOGLE_LANGUAGE, source || 'en'))) {\n        return Promise.reject('Unsupported target language #GoogleTranslate ')\n    }\n\n    //curl 'https://translate.googleapis.com/translate_a/t?anno=3&client=wt_lib&format=html&v=1.0&key&sl=auto&tl=zh&tc=1&sr=1&tk=164775.366094&mode=1' --data-raw 'q=%E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF' --compressed\n    //https://vielhuber.de/zh-cn/blog-zh-cn/google-translation-api-hacking/\n    let query = new URLSearchParams({\n        anno: '4',\n        client: 'te_lib',\n        format: 'html',\n        v: '1.0',\n        key: 'AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw',\n        sl: source,\n        tl: target || 'en',\n        tc: '1',\n        sr: '1',\n        tk: GoogleTranslateTk(text),\n        mode: '1'\n    })\n    //let formData = new URLSearchParams({q: text})\n    return new Promise(async (resolve, reject) => {\n        axiosFetch\n            .post('https://translate.googleapis.com/translate_a/t?' + query.toString(), 'q=' + (text instanceof Array ? text.map((x) => encodeURIComponent(x)).join('&q=') : encodeURIComponent(text)))\n            .then((response: any) => {\n                if (response.data && response.data instanceof Array) {\n                    resolve(raw ? response.data : response.data.map((x: any) => (Array.isArray(x) ? x?.[0] || '' : x || '')).join('\\n'))\n                }\n                reject(raw ? response.data : 'Invalid content #GoogleTranslate ')\n            })\n            .catch((e) => {\n                reject(raw ? e : e.toString())\n            })\n    })\n}\n\nconst GoogleBrowserTranslateV2: TranslatorModuleFunction<'google_browser'> = async (text = '', source = 'en', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #GoogleTranslate ')\n    }\n    if (source === 'auto' || !SupportedLanguage(GOOGLE_LANGUAGE, target || 'en') || !SupportedLanguage(GOOGLE_LANGUAGE, source || 'en')) {\n        return Promise.reject('Unsupported target language #GoogleTranslate ')\n    }\n    return new Promise(async (resolve, reject) => {\n        axiosFetch\n            .post('https://translation.googleapis.com/language/translate/v2?key=AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw', {\n                q: Array.isArray(text) ? text.join('\\n') : text,\n                source,\n                target,\n                format: 'text'\n            })\n            .then((response: any) => {\n                if (response.data && response.data?.data?.translations instanceof Array) {\n                    resolve(raw ? response.data : response.data.data.translations.map((x: any) => x?.translatedText || '').join('\\n'))\n                }\n                reject(raw ? response.data : 'Invalid content #GoogleTranslate ')\n            })\n            .catch((e) => {\n                reject(raw ? e : e.toString())\n            })\n    })\n}\n\nconst hl = function (a: number, b: string) {\n    let c = 0\n    for (; c < b.length - 2; c += 3) {\n        let d: string | number = b.charAt(c + 2)\n        d = 'a' <= d ? d.charCodeAt(0) - 87 : Number(d)\n        d = '+' == b.charAt(c + 1) ? a >>> d : a << d\n        a = '+' == b.charAt(c) ? (a + d) & 4294967295 : a ^ d\n    }\n    return a\n}\nconst getCharCodeList = function (text: string) {\n    let charCodeList = [],\n        charCodeListIndex = 0\n    for (let index = 0; index < text.length; index++) {\n        let charCode = text.charCodeAt(index)\n        if (128 > charCode) {\n            charCodeList[charCodeListIndex++] = charCode\n        } else {\n            if (2048 > charCode) {\n                charCodeList[charCodeListIndex++] = (charCode >> 6) | 192\n            } else {\n                if (55296 == (charCode & 64512) && index + 1 < text.length && 56320 == (text.charCodeAt(index + 1) & 64512)) {\n                    charCode = 65536 + ((charCode & 1023) << 10) + (text.charCodeAt(++index) & 1023)\n                    charCodeList[charCodeListIndex++] = (charCode >> 18) | 240\n                    charCodeList[charCodeListIndex++] = ((charCode >> 12) & 63) | 128\n                } else {\n                    charCodeList[charCodeListIndex++] = (charCode >> 12) | 224\n                }\n                charCodeList[charCodeListIndex++] = ((charCode >> 6) & 63) | 128\n            }\n            charCodeList[charCodeListIndex++] = (charCode & 63) | 128\n        }\n    }\n    return charCodeList\n}\n\n//https://translate.google.com/translate_a/element?cb=gtElInit&hl=zh-CN&client=wt c._ctkk\nconst GoogleTranslateTk = (originalText: string | string[] = '', tkk: number[] = [464385, 3806605782]) => {\n    //from https://translate.googleapis.com/_/translate_http/_/js/k=translate_http.tr.zh_CN.D7QeyoDkDhY.O/d=1/exm=el_conf/ed=1/rs=AN8SPfq20C5s1IToiD2r2PKoyh-SRQysPA/m=el_main\n    let text\n    if (originalText instanceof Array) {\n        text = JSON.parse(JSON.stringify(originalText)).join('')\n    } else {\n        text = originalText\n    }\n    const charCodeList = getCharCodeList(text)\n    let a = tkk[0]\n    for (const charCode of charCodeList) {\n        a += charCode\n        a = hl(a, '+-a^+6')\n    }\n    a = hl(a, '+-3^+b+-f')\n    a ^= tkk[1] ? tkk[1] + 0 : 0\n    if (a < 0) {\n        a = (a & 2147483647) + 2147483648\n    }\n    a %= 1e6\n    return a.toString() + '.' + (a ^ tkk[0])\n}\n\nconst GoogleTTS: TTSModuleFunction<'google'> = async (lang = 'en', text = '', ext = {}) => {\n    try {\n        text = Array.isArray(text) ? text.join('\\n') : text\n        const response = await axiosFetch.get(\n            'https://translate.googleapis.com/translate_tts?' +\n                new URLSearchParams({\n                    //tk: GoogleTranslateTk(text),\n                    client: 'tw-ob',\n                    q: text,\n                    tl: lang,\n                    ttsspeed: '0.8' // unused\n                }).toString(),\n            { responseType: 'arraybuffer' }\n        )\n        return {\n            buffer: response.data,\n            content_length: response.data?.byteLength || response.data?.length || 0,\n            content_type: ((Array.isArray(response.headers['content-type']) ? response.headers['content-type'].join(' ') : response.headers['content-type']) || '').split(';')[0]\n        }\n    } catch {\n        return { buffer: new Uint8Array().buffer, content_type: '', content_length: 0 }\n    }\n}\n\nexport { GoogleTranslate, GoogleBrowserTranslate, GoogleBrowserTranslateV2, GoogleTranslateTk, GoogleTTS }\n","import type { TranslatorModuleFunction, TTSModuleFunction, TTSResponse } from '../types.js'\n\nimport { concatBuffer, generateUUID, htmlentities, SupportedLanguage } from '../misc.js'\nimport axiosFetch, { responseBuilder } from 'translator-utils-axios-helper'\nimport { BING_LANGUAGE, MICROSOFT_TTS_LIST } from '../language.js'\nimport { WebSocket } from 'unws'\n\nconst GetMicrosoftTranslatorToken = async () => {\n    let response: { IG: string; token: string; key: number; message: string } = {\n        IG: '',\n        token: '',\n        key: 0,\n        message: ''\n    }\n\n    let page: responseBuilder\n    try {\n        page = await axiosFetch.get('https://www.bing.com/translator')\n    } catch (e) {\n        response.message = 'Unable to get translator page #MicrosoftTranslator '\n        return response\n    }\n    if (page) {\n        let _G: any | null = null,\n            params_AbusePreventionHelper: any | null = null\n        try {\n            _G = new Function('return ' + /_G=(\\{.+?\\});/.exec(page.data || '')?.[1] || '{IG: \"\"}')()\n            params_AbusePreventionHelper = new Function('return ' + /params_AbusePreventionHelper = (\\[.+?\\]);/.exec(page.data || '')?.[1] || '[\"\", \"\"]')()\n        } catch (e) {\n            response.message = 'Unable to get variables #MicrosoftTranslator '\n            return response\n        }\n        response.IG = _G.IG\n        response.token = params_AbusePreventionHelper[1]\n        response.key = params_AbusePreventionHelper[0]\n        return response\n    } else {\n        response.message = 'Empty page #MicrosoftTranslator '\n        return response\n    }\n}\n\nconst MicrosoftTranslator: TranslatorModuleFunction<'microsoft'> = async (text = '', source = 'auto', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #MicrosoftTranslator ')\n    }\n    if (!SupportedLanguage(BING_LANGUAGE, target || 'en') || (source !== 'auto' && !SupportedLanguage(BING_LANGUAGE, source || 'en'))) {\n        return Promise.reject('Unsupported target language #MicrosoftTranslator ')\n    }\n\n    // get IG, token and key\n    let IG = '',\n        token = '',\n        key = 0\n    if (ext.IG && typeof ext.IG === 'string' && ext.token && typeof ext.token === 'string' && ext.key && typeof ext.key === 'number') {\n        IG = ext.IG\n        token = ext.token\n        key = ext.key\n    } else {\n        const tmpMSTranslatorResponse = await GetMicrosoftTranslatorToken()\n        if (tmpMSTranslatorResponse.message) {\n            return Promise.reject(tmpMSTranslatorResponse.message)\n        } else {\n            IG = tmpMSTranslatorResponse.IG\n            token = tmpMSTranslatorResponse.token\n            key = tmpMSTranslatorResponse.key\n        }\n    }\n\n    return new Promise(async (resolve, reject) => {\n        axiosFetch\n            .post(\n                'https://www.bing.com/ttranslatev3?' +\n                    new URLSearchParams({\n                        isVertical: '1',\n                        IG,\n                        IID: 'translator.5024.1'\n                    }).toString(),\n                new URLSearchParams({\n                    fromLang: source === 'auto' ? 'auto-detect' : source,\n                    text: Array.isArray(text) ? text.join('\\n') : text,\n                    to: target || 'en',\n                    token,\n                    key: key.toString()\n                }).toString()\n            )\n            .then((response: any) => {\n                if (!response.data.statusCode && response.data instanceof Array) {\n                    resolve(\n                        raw\n                            ? response.data\n                            : response.data\n                                  .map((x: any) => (x?.translations || []).map((translation: any) => translation?.text || ''))\n                                  .flat()\n                                  .join('\\n')\n                    )\n                }\n                reject(raw ? response.data : 'Invalid content #MicrosoftTranslator ')\n            })\n            .catch((e) => {\n                reject(raw ? e : e.toString())\n            })\n    })\n}\n\nconst GetMicrosoftBrowserTranslatorAuth = async () => {\n    try {\n        return (await axiosFetch.get('https://edge.microsoft.com/translate/auth')).data\n    } catch (e) {\n        return ''\n    }\n}\n\ntype MicrosoftBrowserPredictResponseType = {\n    isTranslationSupported: boolean\n    isTransliterationSupported: boolean\n    language: string\n    score: number\n}\n\nconst MicrosoftBrowserPredict = async (text: string | string[] = '', jwt = ''): Promise<MicrosoftBrowserPredictResponseType[]> => {\n    if (!text || !jwt) {\n        return []\n    }\n\n    let content = []\n\n    if (!Array.isArray(text)) {\n        content.push({ Text: text })\n    } else {\n        content.push(...text.map((x) => ({ Text: x })))\n    }\n    try {\n        const languageResult = await axiosFetch.post('https://api.cognitive.microsofttranslator.com/detect?api-version=3.0', JSON.stringify(content), { headers: { authorization: jwt, 'content-type': 'application/json' } })\n        if (!languageResult.data?.error && Array.isArray(languageResult.data)) {\n            return languageResult.data\n        } else {\n            return []\n        }\n    } catch (e) {\n        return []\n    }\n}\n\nconst MicrosoftBrowserTranslator: TranslatorModuleFunction<'microsoft_browser'> = async (text = '', source = 'auto', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #MicrosoftTranslator ')\n    }\n    if (!SupportedLanguage(BING_LANGUAGE, target || 'en') || (source !== 'auto' && !SupportedLanguage(BING_LANGUAGE, source || 'en'))) {\n        return Promise.reject('Unsupported target language #MicrosoftTranslator ')\n    }\n\n    //get jwt\n    let jwt = ''\n    if (ext.jwt && typeof ext.jwt === 'string') {\n        jwt = ext.jwt\n    } else {\n        jwt = await GetMicrosoftBrowserTranslatorAuth()\n    }\n    if (jwt) {\n        return new Promise(async (resolve, reject) => {\n            axiosFetch\n                .post(\n                    `https://api.cognitive.microsofttranslator.com/translate?from=${source === 'auto' ? '' : source}&to=${target}&api-version=3.0&includeSentenceLength=true`,\n                    JSON.stringify(text instanceof Array ? text.map((tmpText) => ({ Text: tmpText })) : [{ Text: text }]),\n                    {\n                        headers: {\n                            'content-type': 'application/json',\n                            authorization: `Bearer ${jwt}`\n                        }\n                    }\n                )\n                .then((response: any) => {\n                    if (response.data && response.data instanceof Array) {\n                        resolve(raw ? response.data : response.data.map((x: any) => (x?.translations || [])?.[0]?.text || '').join('\\n'))\n                    }\n                    reject(raw ? response.data : 'Invalid content #MicrosoftTranslator ')\n                })\n                .catch((e) => {\n                    reject(raw ? e : e.toString())\n                })\n        })\n    } else {\n        return Promise.reject('Invalid jwt #MicrosoftTranslator ')\n    }\n}\n\nconst MicrosoftTTS: TTSModuleFunction<'microsoft_tts'> = async (lang = 'en', text = '', ext = {}) => {\n    try {\n        // get IG, token and key\n        let IG = '',\n            token = '',\n            key = 0\n        if (ext.IG && typeof ext.IG === 'string' && ext.token && typeof ext.token === 'string' && ext.key && typeof ext.key === 'number') {\n            IG = ext.IG\n            token = ext.token\n            key = ext.key\n        }\n        // find model\n        const modelInfo = MICROSOFT_TTS_LIST.find((msTTSItem) => msTTSItem.code === lang.toLocaleLowerCase())\n        if (modelInfo) {\n            const response = await axiosFetch.post(\n                'https://www.bing.com/tfettts?' +\n                    new URLSearchParams({\n                        isVertical: '1',\n                        IG,\n                        IID: 'translator.5023.2'\n                    }).toString(),\n                new URLSearchParams({\n                    ssml: `<speak version='1.0' xml:lang='${modelInfo.language}'><voice xml:lang='${modelInfo.language}' xml:gender='${modelInfo.gender}' name='${modelInfo.model}'><prosody rate='-20.00%'>${text}</prosody></voice></speak>`,\n                    token,\n                    key: key.toString()\n                }).toString(),\n                { responseType: 'arraybuffer' }\n            )\n            return {\n                buffer: response.data,\n                content_length: response.data?.byteLength || response.data?.length || 0,\n                content_type: ((Array.isArray(response.headers['content-type']) ? response.headers['content-type'].join(' ') : response.headers['content-type']) || '').split(';')[0]\n            }\n        } else {\n            return {\n                buffer: new Uint8Array().buffer,\n                content_type: '',\n                content_length: 0\n            }\n        }\n    } catch {\n        return {\n            buffer: new Uint8Array().buffer,\n            content_type: '',\n            content_length: 0\n        }\n    }\n}\n\n//const MicrosoftBrowserTTSList = async () => {\n//    const response = await axiosFetch.get('https://speech.platform.bing.com/consumer/speech/synthesize/readaloud/voices/list?trustedclienttoken=6A5AA1D4EAFF4E9FB37E23D68491D6F4')\n//    return response.data\n//}\n\nconst MicrosoftBrowserTTS: TTSModuleFunction<'microsoft_edge_tts'> = async (lang = 'en-US', text = '', ext = {}) => {\n    const requestID = generateUUID().replaceAll('-', '')\n    // edge default `webm-24khz-16bit-mono-opus`\n    const outputFormat = ext?.optput_format ? ext?.optput_format : 'audio-24khz-48kbitrate-mono-mp3'\n    const voice = ext.voice ? ext.voice : 'en-US-AriaNeural'\n\n    const ws = new WebSocket('wss://speech.platform.bing.com/consumer/speech/synthesize/readaloud/edge/v1?TrustedClientToken=6A5AA1D4EAFF4E9FB37E23D68491D6F4')\n\n    return new Promise((resolve, reject) => {\n        let response: TTSResponse = {\n            buffer: new Uint8Array().buffer,\n            content_type: '',\n            content_length: 0,\n            ext: {}\n        }\n        const responseContent: { header: { [p in string]: string }; body: string | Uint8Array; type: string }[] = []\n\n        ws.addEventListener('message', async (event) => {\n            try {\n                if (typeof event.data === 'string') {\n                    // split header and body\n                    const [header, body] = event?.data?.split('\\r\\n\\r\\n')\n                    const tmpContent = {\n                        header: Object.fromEntries(\n                            header.split('\\r\\n').map((header_) => {\n                                const tmpHeaderContent = header_.split(':')\n                                return [tmpHeaderContent.shift(), tmpHeaderContent.join('')]\n                            })\n                        ),\n                        body,\n                        type: 'text'\n                    }\n                    responseContent.push(tmpContent)\n                    if (tmpContent.header.Path === 'turn.end') {\n                        ws.close()\n                    }\n                } else if ((typeof Buffer !== 'undefined' && event.data instanceof Buffer) || (typeof Blob !== 'undefined' && event.data instanceof Blob)) {\n                    let buffer = new Uint8Array()\n                    // browser\n                    //@ts-ignore\n                    if (event.data?.arrayBuffer) {\n                        //@ts-ignore\n                        buffer = new Uint8Array(await event.data.arrayBuffer())\n                    } else if (typeof Buffer !== 'undefined' && event.data instanceof Buffer) {\n                        // binary from npm:ws\n                        buffer = new Uint8Array(event.data)\n                    }\n                    // header length\n                    const headerLength = new DataView(buffer.slice(0, 2).buffer).getUint16(0)\n                    const tmpContent = {\n                        header: Object.fromEntries(\n                            new TextDecoder()\n                                .decode(buffer.slice(2, headerLength + 2))\n                                .split('\\r\\n')\n                                .map((header_) => {\n                                    const tmpHeaderContent = header_.split(':')\n                                    return [tmpHeaderContent.shift(), tmpHeaderContent.join('')]\n                                })\n                        ),\n                        body: buffer.slice(headerLength + 2),\n                        type: 'audio'\n                    }\n                    if (response.content_type === '') {\n                        response.content_type = tmpContent.header['Content-Type']\n                    }\n                    responseContent.push(tmpContent)\n                }\n            } catch (e) {\n                console.error(e)\n                reject(response)\n            }\n        })\n        ws.addEventListener('close', () => {\n            if (response.ext) {\n                response.ext.raw = responseContent\n            }\n            response.buffer = concatBuffer(...responseContent.filter((x) => x.type === 'audio').map((x) => (typeof x.body !== 'string' ? (x.body.buffer as ArrayBuffer) : new ArrayBuffer(0))))\n            response.content_length = response.buffer.byteLength\n            resolve(response)\n        })\n        ws.addEventListener('open', () => {\n            if (Array.isArray(text)) {\n                text = text.join('\\n')\n            }\n            ws.send(\n                encodeMSBrowserTTSRequest(\n                    {\n                        'Content-Type': 'application/json; charset=utf-8',\n                        'X-Timestamp': new Date().toString(),\n                        Path: 'speech.config'\n                    },\n                    JSON.stringify({\n                        context: {\n                            synthesis: {\n                                audio: {\n                                    metadataoptions: {\n                                        sentenceBoundaryEnabled: 'false',\n                                        wordBoundaryEnabled: 'true'\n                                    },\n                                    outputFormat\n                                }\n                            }\n                        }\n                    })\n                )\n            )\n            ws.send(\n                encodeMSBrowserTTSRequest(\n                    {\n                        'X-RequestId': requestID,\n                        'Content-Type': 'application/ssml+xml',\n                        'X-Timestamp': new Date().toString() + 'Z', // I don't know why they add a 'Z' at the end\n                        Path: 'ssml'\n                    },\n                    `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis'  xml:lang='${lang}'><voice name='${voice}'><prosody pitch='+0Hz' rate ='+0%' volume='+0%'>${htmlentities(text)}</prosody></voice></speak>`\n                )\n            )\n        })\n    })\n}\n\nconst encodeMSBrowserTTSRequest = (headers = {}, body = '') => {\n    let content = Object.entries(headers)\n        .map((header) => `${header[0]}:${header[1]}`)\n        .join('\\r\\n')\n    content += '\\r\\n\\r\\n'\n    content += body\n    return content\n}\n\nexport type { MicrosoftBrowserPredictResponseType }\nexport { GetMicrosoftBrowserTranslatorAuth, GetMicrosoftTranslatorToken, MicrosoftBrowserPredict, MicrosoftBrowserTranslator, MicrosoftTranslator }\nexport { MicrosoftBrowserTTS, MicrosoftTTS }\n","import type { TTSModuleFunction, TranslatorModuleFunction } from '../types.js'\nimport { SupportedLanguage, buffer_to_base64 } from '../misc.js'\nimport axiosFetch from 'translator-utils-axios-helper'\nimport cryptoHandle from 'translator-utils-crypto'\nimport { SOGOU_LANGUAGE } from '../language.js'\n\nconst SogouBrowserTranslator: TranslatorModuleFunction<'sogou_browser'> = async (text = '', source = 'auto', target, raw, ext = {}) => {\n    if (!text) {\n        return Promise.reject('Empty text #SogouTranslator ')\n    }\n    if (!SupportedLanguage(SOGOU_LANGUAGE, target || 'en') || (source !== 'auto' && !SupportedLanguage(SOGOU_LANGUAGE, source || 'en'))) {\n        return Promise.reject('Unsupported target language #SogouTranslator ')\n    }\n\n    let body = JSON.stringify({\n        from_lang: source,\n        to_lang: target,\n        trans_frag: text instanceof Array ? text.map((x) => ({ text: x })) : [{ text }]\n    })\n    return new Promise(async (resolve, reject) => {\n        const _body = new FormData()\n        _body.append('S-Param', body)\n        axiosFetch\n            .post('https://go.ie.sogou.com/qbpc/translate', _body)\n            .then((response) => {\n                if (response?.data?.data?.trans_result && response?.data?.data?.trans_result instanceof Array) {\n                    resolve(raw ? response.data : response.data.data.trans_result.map((x: any) => x.trans_text).join('\\n') || '')\n                }\n                reject(raw ? response.data : 'Invalid content #SogouTranslator ')\n            })\n            .catch((e) => {\n                reject(raw ? e : e.toString())\n            })\n    })\n}\n\nconst SogouTTS: TTSModuleFunction<'sogou_tts'> = async (lang = 'en', text = '', ext = {}) => {\n    try {\n        const encryptKeyVoice = new TextEncoder().encode('76350b1840ff9832eb6244ac6d444366')\n        //const iv = Buffer.from('AAAAAAAAAAAAAAAAAAAAAA==', 'base64');\n        const iv = new Uint8Array(16)\n\n        const encipher = await cryptoHandle.subtle.importKey('raw', encryptKeyVoice, { name: 'AES-CBC', length: 256 }, false, ['encrypt'])\n        const encryptedText = await cryptoHandle.subtle.encrypt(\n            { name: 'AES-CBC', iv },\n            encipher,\n            //{\"curTime\":1705565100036,\"text\":\"hi\",\"spokenDialect\":\"en\",\"rate\":\"0.8\"}\n            new TextEncoder().encode(JSON.stringify({ curTime: Date.now(), text: Array.isArray(text) ? text.join('\\n') : text, spokenDialect: lang, rate: '0.8' }))\n        )\n        const response = await axiosFetch.get(\n            'https://fanyi.sogou.com/openapi/external/getWebTTS?' +\n                new URLSearchParams({\n                    'S-AppId': '102356845',\n                    'S-Param': buffer_to_base64(encryptedText)\n                }).toString(),\n            { responseType: 'arraybuffer' }\n        )\n        return {\n            buffer: response.data,\n            content_length: response.data?.byteLength || response.data?.length || 0,\n            content_type: ((Array.isArray(response.headers['content-type']) ? response.headers['content-type'].join(' ') : response.headers['content-type']) || '').split(';')[0]\n        }\n    } catch {\n        return { buffer: new Uint8Array().buffer, content_type: '', content_length: 0 }\n    }\n}\n\nexport { SogouBrowserTranslator, SogouTTS }\n","import { YandexBrowserTranslator } from './source/yandex.js'\nimport { GoogleBrowserTranslate, GoogleBrowserTranslateV2 } from './source/google.js'\nimport { MicrosoftBrowserTranslator } from './source/microsoft.js'\nimport { SogouBrowserTranslator } from './source/sogou.js'\n\nimport type { TranslatorFunction } from './types.js'\nimport type { BING_LIST, GOOGLE_LIST, SOGOU_LIST, YANDEX_LIST } from './language.js'\n\nconst Translator: TranslatorFunction = async (text = '', platform, source, target, raw, ext = {}) => {\n    let result = { content: '', message: '' }\n    try {\n        switch (platform) {\n            case 'google':\n            case 'google_browser':\n                result.content = await GoogleBrowserTranslate(text, source as GOOGLE_LIST, target as GOOGLE_LIST, !!raw, ext)\n                break\n            case 'google_browser_v2':\n                result.content = await GoogleBrowserTranslateV2(text, source as GOOGLE_LIST, target as GOOGLE_LIST, !!raw, ext)\n                break\n            case 'microsoft':\n            case 'microsoft_browser':\n                result.content = await MicrosoftBrowserTranslator(text, source as BING_LIST, target as BING_LIST, !!raw, ext)\n                break\n            case 'sogou':\n            case 'sogou_browser':\n                result.content = await SogouBrowserTranslator(text, source as SOGOU_LIST, target as SOGOU_LIST, !!raw, ext)\n                break\n            case 'yandex':\n            case 'yandex_browser':\n                result.content = await YandexBrowserTranslator(text, source as YANDEX_LIST, target as YANDEX_LIST, !!raw, ext)\n                break\n        }\n    } catch (e) {\n        result.message = String(e)\n    }\n    return result\n}\n\nexport default Translator\n"],"names":["cryptoHandle","crypto","getRandomValues","randomUUID","AxiosRequest","_classCallCheck","_createClass","key","value","requestHandle","url","postData","_this","options","arguments","length","undefined","timeout","validPostRequest","method","toLowerCase","headers","isFormData","FormData","_typeof","JSON","stringify","body","Promise","resolve","reject","fetch","then","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","t0","arrayBuffer","t1","sent","abrupt","data","stop","_x","apply","res","responseBuilder","e","cause","toString","isJson","str","parse","responseType","TextDecoder","decode","Object","fromEntries","entries","getSetCookie","getAll","_toConsumableArray","filter","header","map","status","statusText","get","post","axiosFetch"],"mappings":"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AK,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,UAAU,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,SAAS,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,OAAO,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,UAAU,EAAC,IAAI,EAAC,IAAI,EAAC,SAAS,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,SAAS,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,OAAO,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,UAAU,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,OAAO,EAAC,OAAO,EAAC,IAAI,CAAC;IAGr3C,MAAM,aAAa,GAAgwB,MAAM,eAAevjB,MAAM,cAAc,GAA4B,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,QAAQ,CAAC;;IClBrK;IACA,MAAM,WAAW,GAAG,MAAM,YAAY,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;IAE5D,MAAM,YAAY,GAAG,OAAO,IAA0B,GAAA,EAAE,KAA2B;QAC/E,IAAI,CAAC,IAAI,EAAE;IACP,QAAA,OAAO,GAAG;;IAEd,IAAA,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IACrB,QAAA,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;IAE1B,IAAA,IAAI;IACA,QAAA,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,GAAG,CACvC,qDAAqD;IACjD,YAAA,IAAI,eAAe,CAAC;oBAChB,GAAG,EAAE,WAAW,EAAE;oBAClB,GAAG,EAAE,SAAS;oBACd;;IAEH,aAAA,CAAC,CAAC,QAAQ,EAAE,CACpB;IACD,QAAA,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,KAAK,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;IAChE,YAAA,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,IAAI,GAAG;;iBACpC;IACH,YAAA,OAAO,GAAG;;;QAEhB,OAAO,CAAC,EAAE;IACR,QAAA,OAAO,GAAG;;IAElB,CAAC;IA0CD,MAAM,uBAAuB,GAA+C,OAAO,IAA0B,GAAA,EAAE,EAAE,MAAM,GAAG,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,KAAI;QACvJ,IAAI,CAAC,IAAI,EAAE;IACP,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,+BAA+B,CAAC;;QAE1D,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,MAAM,IAAI,IAAI,CAAC,KAAK,MAAM,KAAK,MAAM,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,MAAM,IAAI,IAAI,CAAC,CAAC,EAAE;IACnI,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,gDAAgD,CAAC;;QAG3E,MAAM,IAAI,GAAG,MAAM,KAAK,MAAM,GAAG,MAAM,YAAY,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,UAAU,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC,GAAG,MAAM;IAEhJ,IAAA,IAAI,IAAI,KAAK,GAAG,EAAE;IACd,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,gDAAgD,CAAC;;IAG3E,IAAA,IAAI,KAAK,GAAG,IAAI,eAAe,CAAC;IAC5B,QAAA,aAAa,EAAE,SAAS;IACxB,QAAA,aAAa,EAAE,4BAA4B;IAC3C,QAAA,EAAE,EAAE,CAAA,EAAG,WAAW,EAAE,CAAM,IAAA,CAAA;IAC1B,QAAA,GAAG,EAAE,WAAW;IAChB,QAAA,IAAI,EAAE,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,MAAM,CAAE,CAAA;IACzB,QAAA,MAAM,EAAE,MAAM;IACd,QAAA,OAAO,EAAE;IACZ,KAAA,CAAC;QACF,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM,KAAI;YACzC;iBACK,GAAG,CAAC,gEAAgE,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,QAAQ,IAAI,IAAI,YAAY,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC/M,aAAA,IAAI,CAAC,CAAC,QAAQ,KAAI;IACf,YAAA,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,YAAY,KAAK,EAAE;oBAC/D,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAEhE,YAAA,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,oCAAoC,CAAC;IACtE,SAAC;IACA,aAAA,KAAK,CAAC,CAAC,CAAC,KAAI;IACT,YAAA,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IAClC,SAAC,CAAC;IACV,KAAC,CAAC;IACN,CAAC;;IClBD,MAAM,sBAAsB,GAA+C,OAAO,IAAI,GAAG,EAAE,EAAE,MAAM,GAAG,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,KAAI;QACnI,IAAI,CAAC,IAAI,EAAE;IACP,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC;;QAEzD,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,MAAM,IAAI,IAAI,CAAC,KAAK,MAAM,KAAK,MAAM,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,MAAM,IAAI,IAAI,CAAC,CAAC,EAAE;IACnI,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,+CAA+C,CAAC;;;;IAK1E,IAAA,IAAI,KAAK,GAAG,IAAI,eAAe,CAAC;IAC5B,QAAA,IAAI,EAAE,GAAG;IACT,QAAA,MAAM,EAAE,QAAQ;IAChB,QAAA,MAAM,EAAE,MAAM;IACd,QAAA,CAAC,EAAE,KAAK;IACR,QAAA,GAAG,EAAE,yCAAyC;IAC9C,QAAA,EAAE,EAAE,MAAM;YACV,EAAE,EAAE,MAAM,IAAI,IAAI;IAClB,QAAA,EAAE,EAAE,GAAG;IACP,QAAA,EAAE,EAAE,GAAG;IACP,QAAA,EAAE,EAAE,iBAAiB,CAAC,IAAI,CAAC;IAC3B,QAAA,IAAI,EAAE;IACT,KAAA,CAAC;;QAEF,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM,KAAI;YACzC;iBACK,IAAI,CAAC,iDAAiD,GAAG,KAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,IAAI,IAAI,YAAY,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACzL,aAAA,IAAI,CAAC,CAAC,QAAa,KAAI;gBACpB,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,YAAY,KAAK,EAAE;oBACjD,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAM,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAExH,YAAA,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,mCAAmC,CAAC;IACrE,SAAC;IACA,aAAA,KAAK,CAAC,CAAC,CAAC,KAAI;IACT,YAAA,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IAClC,SAAC,CAAC;IACV,KAAC,CAAC;IACN,CAAC;IAED,MAAM,wBAAwB,GAA+C,OAAO,IAAI,GAAG,EAAE,EAAE,MAAM,GAAG,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,KAAI;QACnI,IAAI,CAAC,IAAI,EAAE;IACP,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC;;QAEzD,IAAI,MAAM,KAAK,MAAM,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,MAAM,IAAI,IAAI,CAAC,EAAE;IACjI,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,+CAA+C,CAAC;;QAE1E,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM,KAAI;YACzC;iBACK,IAAI,CAAC,sGAAsG,EAAE;IAC1G,YAAA,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI;gBAC/C,MAAM;gBACN,MAAM;IACN,YAAA,MAAM,EAAE;aACX;IACA,aAAA,IAAI,CAAC,CAAC,QAAa,KAAI;IACpB,YAAA,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,YAAY,KAAK,EAAE;IACrE,gBAAA,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAM,KAAK,CAAC,EAAE,cAAc,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAEtH,YAAA,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,mCAAmC,CAAC;IACrE,SAAC;IACA,aAAA,KAAK,CAAC,CAAC,CAAC,KAAI;IACT,YAAA,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IAClC,SAAC,CAAC;IACV,KAAC,CAAC;IACN,CAAC;IAED,MAAM,EAAE,GAAG,UAAU,CAAS,EAAE,CAAS,EAAA;QACrC,IAAI,CAAC,GAAG,CAAC;IACT,IAAA,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YAC7B,IAAI,CAAC,GAAoB,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;YACxC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;YAC/C,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;YAC7C,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC,GAAG,CAAC;;IAEzD,IAAA,OAAO,CAAC;IACZ,CAAC;IACD,MAAM,eAAe,GAAG,UAAU,IAAY,EAAA;IAC1C,IAAA,IAAI,YAAY,GAAG,EAAE,EACjB,iBAAiB,GAAG,CAAC;IACzB,IAAA,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC9C,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IACrC,QAAA,IAAI,GAAG,GAAG,QAAQ,EAAE;IAChB,YAAA,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,QAAQ;;iBACzC;IACH,YAAA,IAAI,IAAI,GAAG,QAAQ,EAAE;IACjB,gBAAA,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,IAAI,GAAG;;qBACtD;IACH,gBAAA,IAAI,KAAK,KAAK,QAAQ,GAAG,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,KAAK,KAAK,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE;wBACzG,QAAQ,GAAG,KAAK,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;IAChF,oBAAA,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,IAAI,GAAG;IAC1D,oBAAA,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,IAAI,EAAE,IAAI,EAAE,IAAI,GAAG;;yBAC9D;IACH,oBAAA,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,IAAI,GAAG;;IAE9D,gBAAA,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG;;IAEpE,YAAA,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,QAAQ,GAAG,EAAE,IAAI,GAAG;;;IAGjE,IAAA,OAAO,YAAY;IACvB,CAAC;IAED;IACA,MAAM,iBAAiB,GAAG,CAAC,YAAA,GAAkC,EAAE,EAAE,GAAgB,GAAA,CAAC,MAAM,EAAE,UAAU,CAAC,KAAI;;IAErG,IAAA,IAAI,IAAI;IACR,IAAA,IAAI,YAAY,YAAY,KAAK,EAAE;IAC/B,QAAA,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;;aACrD;YACH,IAAI,GAAG,YAAY;;IAEvB,IAAA,MAAM,YAAY,GAAG,eAAe,CAAC,IAAI,CAAC;IAC1C,IAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACd,IAAA,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE;YACjC,CAAC,IAAI,QAAQ;IACb,QAAA,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC;;IAEvB,IAAA,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC;IACtB,IAAA,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;IAC5B,IAAA,IAAI,CAAC,GAAG,CAAC,EAAE;YACP,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,IAAI,UAAU;;QAErC,CAAC,IAAI,GAAG;IACR,IAAA,OAAO,CAAC,CAAC,QAAQ,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;;IChHD,MAAM,iCAAiC,GAAG,YAAW;IACjD,IAAA,IAAI;YACA,OAAO,CAAC,MAAM,UAAU,CAAC,GAAG,CAAC,2CAA2C,CAAC,EAAE,IAAI;;QACjF,OAAO,CAAC,EAAE;IACR,QAAA,OAAO,EAAE;;IAEjB,CAAC;IAiCD,MAAM,0BAA0B,GAAkD,OAAO,IAAI,GAAG,EAAE,EAAE,MAAM,GAAG,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,KAAI;QAC1I,IAAI,CAAC,IAAI,EAAE;IACP,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,kCAAkC,CAAC;;QAE7D,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,MAAM,IAAI,IAAI,CAAC,KAAK,MAAM,KAAK,MAAM,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,MAAM,IAAI,IAAI,CAAC,CAAC,EAAE;IAC/H,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,mDAAmD,CAAC;;;QAI9E,IAAI,GAAG,GAAG,EAAE;QACZ,IAAI,GAAG,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,GAAG,KAAK,QAAQ,EAAE;IACxC,QAAA,GAAG,GAAG,GAAG,CAAC,GAAG;;aACV;IACH,QAAA,GAAG,GAAG,MAAM,iCAAiC,EAAE;;QAEnD,IAAI,GAAG,EAAE;YACL,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM,KAAI;gBACzC;qBACK,IAAI,CACD,CAAgE,6DAAA,EAAA,MAAM,KAAK,MAAM,GAAG,EAAE,GAAG,MAAM,CAAO,IAAA,EAAA,MAAM,CAA6C,2CAAA,CAAA,EACzJ,IAAI,CAAC,SAAS,CAAC,IAAI,YAAY,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EACrG;IACI,gBAAA,OAAO,EAAE;IACL,oBAAA,cAAc,EAAE,kBAAkB;wBAClC,aAAa,EAAE,CAAU,OAAA,EAAA,GAAG,CAAE;IACjC;iBACJ;IAEJ,iBAAA,IAAI,CAAC,CAAC,QAAa,KAAI;oBACpB,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,YAAY,KAAK,EAAE;wBACjD,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAM,KAAK,CAAC,CAAC,EAAE,YAAY,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAErH,gBAAA,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,uCAAuC,CAAC;IACzE,aAAC;IACA,iBAAA,KAAK,CAAC,CAAC,CAAC,KAAI;IACT,gBAAA,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IAClC,aAAC,CAAC;IACV,SAAC,CAAC;;aACC;IACH,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,mCAAmC,CAAC;;IAElE,CAAC;;ICnLD,MAAM,sBAAsB,GAA8C,OAAO,IAAI,GAAG,EAAE,EAAE,MAAM,GAAG,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,KAAI;QAClI,IAAI,CAAC,IAAI,EAAE;IACP,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC;;QAEzD,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,MAAM,IAAI,IAAI,CAAC,KAAK,MAAM,KAAK,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,MAAM,IAAI,IAAI,CAAC,CAAC,EAAE;IACjI,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,+CAA+C,CAAC;;IAG1E,IAAA,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;IACtB,QAAA,SAAS,EAAE,MAAM;IACjB,QAAA,OAAO,EAAE,MAAM;IACf,QAAA,UAAU,EAAE,IAAI,YAAY,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE;IACjF,KAAA,CAAC;QACF,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM,KAAI;IACzC,QAAA,MAAM,KAAK,GAAG,IAAI,QAAQ,EAAE;IAC5B,QAAA,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC;YAC7B;IACK,aAAA,IAAI,CAAC,wCAAwC,EAAE,KAAK;IACpD,aAAA,IAAI,CAAC,CAAC,QAAQ,KAAI;IACf,YAAA,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,YAAY,KAAK,EAAE;IAC3F,gBAAA,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAM,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;;IAEjH,YAAA,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,mCAAmC,CAAC;IACrE,SAAC;IACA,aAAA,KAAK,CAAC,CAAC,CAAC,KAAI;IACT,YAAA,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IAClC,SAAC,CAAC;IACV,KAAC,CAAC;IACN,CAAC;;AC1BK,UAAA,UAAU,GAAuB,OAAO,IAAI,GAAG,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,KAAI;QAChG,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACzC,IAAA,IAAI;YACA,QAAQ,QAAQ;IACZ,YAAA,KAAK,QAAQ;IACb,YAAA,KAAK,gBAAgB;IACjB,gBAAA,MAAM,CAAC,OAAO,GAAG,MAAM,sBAAsB,CAAC,IAAI,EAAE,MAAqB,EAAE,MAAqB,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;oBAC7G;IACJ,YAAA,KAAK,mBAAmB;IACpB,gBAAA,MAAM,CAAC,OAAO,GAAG,MAAM,wBAAwB,CAAC,IAAI,EAAE,MAAqB,EAAE,MAAqB,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;oBAC/G;IACJ,YAAA,KAAK,WAAW;IAChB,YAAA,KAAK,mBAAmB;IACpB,gBAAA,MAAM,CAAC,OAAO,GAAG,MAAM,0BAA0B,CAAC,IAAI,EAAE,MAAmB,EAAE,MAAmB,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;oBAC7G;IACJ,YAAA,KAAK,OAAO;IACZ,YAAA,KAAK,eAAe;IAChB,gBAAA,MAAM,CAAC,OAAO,GAAG,MAAM,sBAAsB,CAAC,IAAI,EAAE,MAAoB,EAAE,MAAoB,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;oBAC3G;IACJ,YAAA,KAAK,QAAQ;IACb,YAAA,KAAK,gBAAgB;IACjB,gBAAA,MAAM,CAAC,OAAO,GAAG,MAAM,uBAAuB,CAAC,IAAI,EAAE,MAAqB,EAAE,MAAqB,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;oBAC9G;;;QAEV,OAAO,CAAC,EAAE;IACR,QAAA,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;;IAE9B,IAAA,OAAO,MAAM;IACjB;;;;;;;;"}